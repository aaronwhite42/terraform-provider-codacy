{
   "swagger": "2.0",
   "info": {
      "version": "3.0.0",
      "title": "Codacy API",
      "description": "Codacy API v3 reference.\n\n[Import the OpenAPI 2.0 definition](https://api.codacy.com/api/api-docs/swagger.yaml) into your development tools to help bootstrap your integration with Codacy.\nFor more information see [Using the Codacy API](https://docs.codacy.com/codacy-api/using-the-codacy-api/).\n",
      "contact": {
         "name": "Codacy Team",
         "email": "code@codacy.com",
         "url": "https://www.codacy.com"
      },
      "license": {
         "name": "Codacy. All rights reserved",
         "url": "https://www.codacy.com"
      }
   },
   "schemes": [
      "https"
   ],
   "host": "app.codacy.com",
   "basePath": "/api/v3",
   "produces": [
      "application/json"
   ],
   "consumes": [
      "application/json"
   ],
   "securityDefinitions": {
      "ApiKeyAuth": {
         "type": "apiKey",
         "in": "header",
         "name": "api-token",
         "description": "Learn how to [generate an account API token](https://docs.codacy.com/codacy-api/api-tokens/#account-api-tokens)"
      }
   },
   "definitions": {
      "Version": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "string"
            }
         }
      },
      "Visibility": {
         "type": "string",
         "description": "Visibility of the repository",
         "example": "Private",
         "x-ms-enum": {
            "name": "Visibility"
         },
         "enum": [
            "Public",
            "Private",
            "LoginPublic"
         ]
      },
      "RepositoryFilter": {
         "type": "string",
         "x-ms-enum": {
            "name": "RepositoryFilter"
         },
         "enum": [
            "Synced",
            "NotSynced"
         ]
      },
      "ConfigurationStatusCategory": {
         "type": "string",
         "x-ms-enum": {
            "name": "ConfigurationStatusCategory"
         },
         "enum": [
            "database",
            "secrets",
            "email",
            "github",
            "github-enterprise",
            "bitbucket",
            "bitbucket-server",
            "gitlab",
            "gitlab-enterprise",
            "license"
         ]
      },
      "Provider": {
         "type": "string",
         "description": "Git provider hosting the repository",
         "example": "gh",
         "x-ms-enum": {
            "name": "Provider"
         },
         "enum": [
            "bb",
            "gh",
            "gl"
         ]
      },
      "AccountProvider": {
         "type": "string",
         "x-ms-enum": {
            "name": "AccountProvider"
         },
         "enum": [
            "github",
            "google",
            "bitbucket",
            "gitlab"
         ]
      },
      "JoinMode": {
         "type": "string",
         "x-ms-enum": {
            "name": "JoinMode"
         },
         "enum": [
            "auto",
            "adminAuto",
            "request"
         ]
      },
      "JoinStatus": {
         "type": "string",
         "x-ms-enum": {
            "name": "JoinStatus"
         },
         "enum": [
            "member",
            "pendingMember",
            "remoteMember"
         ]
      },
      "SeverityLevel": {
         "type": "string",
         "description": "Issue severity level. (These values map to our UI as follows: Info->Minor, Warning->Medium, Error->Critical)",
         "example": "Error",
         "x-ms-enum": {
            "name": "SeverityLevel"
         },
         "enum": [
            "Info",
            "Warning",
            "Error"
         ]
      },
      "JoinResponse": {
         "type": "object",
         "required": [
            "organizationIdentifier",
            "joinStatus"
         ],
         "properties": {
            "organizationIdentifier": {
               "type": "integer",
               "format": "int64"
            },
            "joinStatus": {
               "$ref": "#/definitions/JoinStatus"
            }
         }
      },
      "RequestToJoin": {
         "type": "object",
         "required": [
            "email",
            "name",
            "creationDate"
         ],
         "properties": {
            "email": {
               "type": "string",
               "example": "mail@mail.com"
            },
            "name": {
               "type": "string",
               "example": "a display name"
            },
            "numberOfCommits": {
               "type": "integer",
               "format": "int32"
            },
            "numberOfRepositories": {
               "type": "integer",
               "format": "int32"
            },
            "lastActivity": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2020-01-06T14:29:13.430Z"
            },
            "creationDate": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2020-01-06T14:29:13.430Z"
            }
         }
      },
      "ListRequestsToJoinResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/RequestToJoin"
               }
            }
         }
      },
      "UserRole": {
         "type": "string",
         "x-ms-enum": {
            "name": "UserRole"
         },
         "enum": [
            "admin",
            "member",
            "author"
         ]
      },
      "Permission": {
         "type": "string",
         "x-ms-enum": {
            "name": "Permission"
         },
         "enum": [
            "admin",
            "write",
            "read"
         ]
      },
      "AnalysisAction": {
         "type": "string",
         "x-ms-enum": {
            "name": "AnalysisAction"
         },
         "enum": [
            "clone",
            "createTasks",
            "runMetrics",
            "runPatterns",
            "createOverviews"
         ]
      },
      "FirstAnalysisOverview": {
         "type": "object",
         "required": [
            "action",
            "complete"
         ],
         "properties": {
            "action": {
               "$ref": "#/definitions/AnalysisAction"
            },
            "complete": {
               "type": "boolean",
               "example": false
            }
         }
      },
      "FirstAnalysisOverviewResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/FirstAnalysisOverview"
               }
            }
         }
      },
      "OrganizationType": {
         "type": "string",
         "description": "The type of Organization",
         "example": "Organization",
         "x-ms-enum": {
            "name": "OrganizationType"
         },
         "enum": [
            "Account",
            "Organization"
         ]
      },
      "HealthCheck": {
         "type": "object",
         "required": [
            "message"
         ],
         "properties": {
            "message": {
               "type": "string",
               "example": "Hello, it's me"
            }
         }
      },
      "HealthCheckResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/HealthCheck"
            }
         }
      },
      "PaginationInfo": {
         "type": "object",
         "description": "Cursor-based pagination information to obtain more items",
         "properties": {
            "cursor": {
               "type": "string",
               "description": "Cursor for the next items in the list"
            },
            "limit": {
               "type": "integer",
               "format": "int32",
               "description": "Maximum number of items returned"
            },
            "total": {
               "type": "integer",
               "format": "int32",
               "description": "Total number of items returned"
            }
         }
      },
      "PaymentProvider": {
         "type": "string",
         "enum": [
            "stripe",
            "chargebee",
            "direct",
            "github"
         ]
      },
      "User": {
         "type": "object",
         "required": [
            "id",
            "mainEmail",
            "otherEmails",
            "isAdmin",
            "isActive",
            "created"
         ],
         "properties": {
            "id": {
               "type": "integer",
               "format": "int64"
            },
            "name": {
               "type": "string",
               "example": "Foo"
            },
            "mainEmail": {
               "type": "string",
               "example": "main@codacy.com"
            },
            "otherEmails": {
               "type": "array",
               "items": {
                  "type": "string"
               },
               "example": [
                  "foo@bar.com"
               ]
            },
            "isAdmin": {
               "type": "boolean",
               "example": false
            },
            "isActive": {
               "type": "boolean",
               "example": true
            },
            "created": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2019-05-07T14:29:13.430Z"
            },
            "intercomHash": {
               "type": "string",
               "example": "userhash"
            },
            "shouldDoClientQualification": {
               "type": "boolean",
               "example": false
            }
         }
      },
      "UserResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/User"
            }
         }
      },
      "UserBody": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string",
               "example": "Foo"
            },
            "shouldDoClientQualification": {
               "type": "boolean",
               "example": false
            }
         }
      },
      "ChangePasswordBody": {
         "type": "object",
         "required": [
            "currentPassword",
            "newPassword"
         ],
         "properties": {
            "currentPassword": {
               "type": "string",
               "example": "current_pass"
            },
            "newPassword": {
               "type": "string",
               "example": "new_pass"
            }
         }
      },
      "Organization": {
         "type": "object",
         "required": [
            "name",
            "provider",
            "type",
            "remoteIdentifier"
         ],
         "properties": {
            "identifier": {
               "type": "integer",
               "format": "int64"
            },
            "remoteIdentifier": {
               "type": "string"
            },
            "name": {
               "type": "string",
               "example": "FooOrganization"
            },
            "avatar": {
               "type": "string",
               "example": "someRandomLink.com"
            },
            "created": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2019-05-07T14:29:13.430Z"
            },
            "provider": {
               "$ref": "#/definitions/Provider"
            },
            "joinMode": {
               "$ref": "#/definitions/JoinMode"
            },
            "type": {
               "$ref": "#/definitions/OrganizationType"
            },
            "joinStatus": {
               "$ref": "#/definitions/JoinStatus"
            },
            "userRole": {
               "$ref": "#/definitions/UserRole"
            }
         }
      },
      "AddOrganizationResponse": {
         "type": "object",
         "required": [
            "organization"
         ],
         "properties": {
            "organization": {
               "$ref": "#/definitions/Organization"
            },
            "warnings": {
               "type": "array",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "OrganizationListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/Organization"
               }
            }
         }
      },
      "Membership": {
         "type": "object",
         "required": [
            "userRole"
         ],
         "properties": {
            "userRole": {
               "$ref": "#/definitions/UserRole"
            }
         }
      },
      "Billing": {
         "type": "object",
         "required": [
            "isPremium"
         ],
         "properties": {
            "isPremium": {
               "type": "boolean",
               "example": true
            },
            "code": {
               "type": "string",
               "example": "trial"
            },
            "monthly": {
               "type": "boolean",
               "example": true
            },
            "price": {
               "type": "integer",
               "format": "int64",
               "example": 1000
            },
            "pricedPerUser": {
               "type": "boolean",
               "example": true
            }
         }
      },
      "OrganizationBillingInformation": {
         "type": "object",
         "required": [
            "numberOfSeats",
            "numberOfPurchasedSeats",
            "paymentPlan"
         ],
         "properties": {
            "numberOfSeats": {
               "type": "integer",
               "format": "int32",
               "example": 42
            },
            "numberOfPurchasedSeats": {
               "type": "integer",
               "format": "int32",
               "example": 100
            },
            "paymentPlan": {
               "$ref": "#/definitions/Billing"
            },
            "paymentGateway": {
               "$ref": "#/definitions/PaymentProvider"
            }
         }
      },
      "OrganizationBillingInformationResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/OrganizationBillingInformation"
            }
         }
      },
      "Paywall": {
         "type": "object",
         "required": [
            "organizationDashboard",
            "securityDashboard"
         ],
         "properties": {
            "organizationDashboard": {
               "type": "boolean",
               "example": true
            },
            "securityDashboard": {
               "type": "boolean",
               "example": true
            }
         }
      },
      "OrganizationWithMeta": {
         "type": "object",
         "required": [
            "organization",
            "membership",
            "analysisConfigurationMinimumPermission"
         ],
         "properties": {
            "organization": {
               "$ref": "#/definitions/Organization"
            },
            "membership": {
               "$ref": "#/definitions/Membership"
            },
            "billing": {
               "$ref": "#/definitions/Billing"
            },
            "paywall": {
               "$ref": "#/definitions/Paywall"
            },
            "analysisConfigurationMinimumPermission": {
               "$ref": "#/definitions/Permission"
            }
         }
      },
      "OrganizationWithMetaResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/OrganizationWithMeta"
            }
         }
      },
      "Integration": {
         "type": "object",
         "required": [
            "provider",
            "lastAuthenticated"
         ],
         "properties": {
            "provider": {
               "$ref": "#/definitions/AccountProvider"
            },
            "lastAuthenticated": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2019-05-07T14:29:13.430Z"
            }
         }
      },
      "IntegrationListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/Integration"
               }
            }
         }
      },
      "Repository": {
         "type": "object",
         "required": [
            "provider",
            "owner",
            "name",
            "visibility",
            "problems",
            "languages"
         ],
         "properties": {
            "repositoryId": {
               "type": "integer",
               "format": "int64",
               "description": "Codacy identifier for this repository",
               "example": 45738
            },
            "provider": {
               "$ref": "#/definitions/Provider"
            },
            "owner": {
               "type": "string",
               "description": "Name of the organization that owns the repository",
               "example": "codacy"
            },
            "name": {
               "type": "string",
               "description": "Name of the repository",
               "example": "codacy-eslint"
            },
            "fullPath": {
               "type": "string",
               "description": "Full path of the repository on the Git provider",
               "example": "codacy/codacy-eslint"
            },
            "visibility": {
               "$ref": "#/definitions/Visibility"
            },
            "remoteIdentifier": {
               "type": "string",
               "description": "Unique identifier of the repository on the Git provider",
               "example": "3"
            },
            "lastUpdated": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "description": "Timestamp when the repository was last updated, [depending on the Git provider](https://docs.codacy.com/organizations/organization-overview/#last-updated-repositories)",
               "example": "2019-05-07T14:29:13.430Z"
            },
            "permission": {
               "$ref": "#/definitions/Permission"
            },
            "problems": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/RepositoryProblem"
               }
            },
            "languages": {
               "type": "array",
               "description": "List of the languages in the repository",
               "items": {
                  "type": "string"
               },
               "example": [
                  "Java",
                  "Scala",
                  "CSS"
               ]
            },
            "defaultBranch": {
               "$ref": "#/definitions/Branch"
            },
            "badges": {
               "$ref": "#/definitions/Badges"
            }
         }
      },
      "Badges": {
         "required": [
            "grade",
            "coverage"
         ],
         "properties": {
            "grade": {
               "type": "string",
               "description": "Repository grade badge URL",
               "example": "https://app.codacy.com/project/badge/Grade/d992a862b1994805907ec277e16b0fda"
            },
            "coverage": {
               "type": "string",
               "description": "Repository coverage badge URL",
               "example": "https://app.codacy.com/project/badge/Coverage/d992a862b1994805907ec277e16b0fda"
            }
         }
      },
      "RepositoryResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/Repository"
            }
         }
      },
      "Commit": {
         "allOf": [
            {
               "$ref": "#/definitions/CommitIdentification"
            },
            {
               "type": "object",
               "required": [
                  "id",
                  "commitTimestamp"
               ],
               "properties": {
                  "id": {
                     "type": "integer",
                     "format": "int64",
                     "description": "Internal commit identifier",
                     "example": 1
                  },
                  "commitTimestamp": {
                     "type": "string",
                     "format": "date-time",
                     "x-scala-type": "java.time.Instant",
                     "description": "Timestamp when the commit was created",
                     "example": "2019-05-07T14:29:13.430Z"
                  },
                  "authorName": {
                     "type": "string",
                     "description": "Name of the commit author"
                  },
                  "authorEmail": {
                     "type": "string",
                     "description": "Email address of the commit author"
                  },
                  "message": {
                     "type": "string",
                     "description": "Commit message"
                  },
                  "startedAnalysis": {
                     "type": "string",
                     "format": "date-time",
                     "x-scala-type": "java.time.Instant",
                     "description": "Timestamp when Codacy started the last analysis of the commit",
                     "example": "2022-01-07T14:29:13.430Z"
                  },
                  "endedAnalysis": {
                     "type": "string",
                     "format": "date-time",
                     "x-scala-type": "java.time.Instant",
                     "description": "Timestamp when Codacy finished the last analysis of the commit",
                     "example": "2022-01-07T14:29:13.430Z"
                  }
               }
            }
         ]
      },
      "CommitWithBranches": {
         "allOf": [
            {
               "$ref": "#/definitions/Commit"
            },
            {
               "type": "object",
               "properties": {
                  "branches": {
                     "type": "array",
                     "description": "List of branches containing the commit",
                     "items": {
                        "$ref": "#/definitions/Branch"
                     }
                  }
               }
            }
         ]
      },
      "RepositoryListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/Repository"
               }
            }
         }
      },
      "ProblemLink": {
         "required": [
            "name",
            "url"
         ],
         "properties": {
            "name": {
               "type": "string",
               "example": "Check our documentation"
            },
            "url": {
               "type": "string",
               "example": "https://docs.codacy.com/faq/troubleshooting/why-isnt-my-public-repository-being-analyzed/"
            }
         }
      },
      "RepositoryProblem": {
         "required": [
            "message",
            "actions",
            "code",
            "severity"
         ],
         "properties": {
            "message": {
               "type": "string",
               "example": "We can't analyze this repository because none of the committers are part of the organization."
            },
            "actions": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/ProblemLink"
               }
            },
            "code": {
               "type": "string",
               "description": "A stable identifier for a problem.",
               "example": "failed_to_clone"
            },
            "severity": {
               "type": "string",
               "description": "The extent to which this problem affects the repository in terms of analysis execution.",
               "example": "all_analysis"
            }
         }
      },
      "RepositoryWithAnalysis": {
         "required": [
            "repository"
         ],
         "properties": {
            "lastAnalysedCommit": {
               "$ref": "#/definitions/Commit"
            },
            "grade": {
               "type": "integer",
               "format": "int32",
               "description": "Quality grade of the file as a number between 100 (highest grade) and 0 (lowest grade)",
               "example": 74
            },
            "gradeLetter": {
               "type": "string",
               "description": "Quality grade of the file as a letter between A (highest grade) and F (lowest grade)",
               "example": "A"
            },
            "issuesPercentage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "complexFilesPercentage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "duplicationPercentage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "repository": {
               "$ref": "#/definitions/Repository"
            },
            "branch": {
               "$ref": "#/definitions/Branch"
            },
            "selectedBranch": {
               "$ref": "#/definitions/Branch"
            },
            "coverage": {
               "$ref": "#/definitions/Coverage"
            }
         }
      },
      "RepositoryWithAnalysisResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/RepositoryWithAnalysis"
            }
         }
      },
      "RepositoryWithAnalysisListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/RepositoryWithAnalysis"
               }
            }
         }
      },
      "PullRequestOwner": {
         "type": "object",
         "required": [
            "name"
         ],
         "properties": {
            "name": {
               "type": "string",
               "example": "Foo"
            },
            "avatarUrl": {
               "type": "string",
               "example": "https://example.com/foo"
            }
         }
      },
      "PullRequest": {
         "type": "object",
         "required": [
            "id",
            "number",
            "updated",
            "repository",
            "title",
            "owner"
         ],
         "properties": {
            "id": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "number": {
               "type": "integer",
               "format": "int32",
               "example": 1
            },
            "updated": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2019-05-07T14:29:13.430Z"
            },
            "repository": {
               "type": "string",
               "example": "awesome-repository"
            },
            "title": {
               "type": "string",
               "example": "Amazing pull request"
            },
            "owner": {
               "$ref": "#/definitions/PullRequestOwner"
            },
            "originBranch": {
               "type": "string",
               "example": "feat-branch"
            },
            "targetBranch": {
               "type": "string",
               "example": "master"
            }
         }
      },
      "PullRequestWithAnalysis": {
         "type": "object",
         "required": [
            "pullRequest",
            "isAnalysing"
         ],
         "properties": {
            "isUpToStandards": {
               "type": "boolean",
               "example": true
            },
            "isAnalysing": {
               "type": "boolean",
               "example": false
            },
            "pullRequest": {
               "$ref": "#/definitions/PullRequest"
            },
            "newIssues": {
               "description": "Number of issues introduced by the pull request",
               "type": "integer",
               "format": "int32",
               "example": 1
            },
            "fixedIssues": {
               "description": "Number of issues fixed by the pull request",
               "type": "integer",
               "format": "int32",
               "example": 1
            },
            "deltaComplexity": {
               "description": "Difference in cyclomatic complexity introduced by the pull request",
               "type": "integer",
               "format": "int32",
               "example": 1
            },
            "deltaClonesCount": {
               "description": "Difference in number of duplicated blocks of code introduced by the pull request",
               "type": "integer",
               "format": "int32",
               "example": 1
            },
            "deltaCoverage": {
               "description": "Difference in code coverage percentage when compared to the destination branch",
               "type": "integer",
               "format": "int32",
               "example": 1
            },
            "diffCoverage": {
               "description": "Total code coverage value for the changes in this pull request",
               "type": "number",
               "multipleOf": 0.01,
               "format": "double",
               "example": 71
            }
         }
      },
      "PullRequestWithAnalysisListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/PullRequestWithAnalysis"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "CategoryIssues": {
         "type": "object",
         "required": [
            "categoryId",
            "numberOfIssues"
         ],
         "properties": {
            "categoryId": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "numberOfIssues": {
               "type": "integer",
               "format": "int64",
               "example": 100
            }
         }
      },
      "CommitAnalysisStats": {
         "type": "object",
         "required": [
            "repositoryId",
            "commitId",
            "numberIssues",
            "numberLoc",
            "issuesPerCategory",
            "issuePercentage",
            "techDebt",
            "totalFilesAdded",
            "totalFilesRemoved",
            "totalFilesChanged",
            "commitAuthorName",
            "commitTimestamp",
            "commitShortUUID"
         ],
         "properties": {
            "repositoryId": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "commitId": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "numberIssues": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "numberLoc": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "issuesPerCategory": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CategoryIssues"
               }
            },
            "issuePercentage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "totalComplexity": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "numberComplexFiles": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "complexFilesPercentage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "filesChangedToIncreaseComplexity": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "numberDuplicatedLines": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "duplicationPercentage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "coveragePercentage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "coveragePercentageWithDecimals": {
               "type": "number",
               "format": "double",
               "example": 15.25
            },
            "numberFilesUncovered": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "techDebt": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "totalFilesAdded": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "totalFilesRemoved": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "totalFilesChanged": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "commitTimestamp": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2019-05-07T14:29:13.430Z"
            },
            "commitAuthorName": {
               "type": "string",
               "example": "Mike The Developer"
            },
            "commitShortUUID": {
               "type": "string",
               "example": "00d3079ed"
            }
         }
      },
      "CommitAnalysisStatsListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CommitAnalysisStats"
               }
            }
         }
      },
      "PatternDetails": {
         "description": "Details of the pattern that was identified in the issue",
         "required": [
            "id",
            "category",
            "level",
            "severityLevel"
         ],
         "properties": {
            "id": {
               "type": "string",
               "description": "Pattern identifier (unique per tool)",
               "example": "accessor-pairs"
            },
            "title": {
               "type": "string",
               "description": "Pattern title"
            },
            "category": {
               "type": "string",
               "description": "Pattern category",
               "example": "Security"
            },
            "subCategory": {
               "type": "string",
               "description": "Pattern subcategory (optional since some patterns might not have a subcategory)",
               "example": "XSS"
            },
            "level": {
               "type": "string",
               "description": "Deprecated, use severity instead. Issue severity level. (These values map to our UI as follows: Info->Minor, Warning->Medium, Error->Critical)",
               "example": "Error",
               "x-ms-enum": {
                  "name": "SeverityLevel"
               },
               "enum": [
                  "Info",
                  "Warning",
                  "Error"
               ]
            },
            "severityLevel": {
               "$ref": "#/definitions/SeverityLevel"
            }
         }
      },
      "ToolReference": {
         "description": "Details of the tool that found the issue",
         "required": [
            "uuid",
            "name"
         ],
         "properties": {
            "uuid": {
               "type": "string",
               "description": "Tool unique identifier",
               "example": "847feb32-9ff2-11ea-bb37-0242ac130002"
            },
            "name": {
               "type": "string",
               "description": "Name of the tool",
               "example": "ESLint"
            }
         }
      },
      "CommitIdentification": {
         "type": "object",
         "required": [
            "sha"
         ],
         "properties": {
            "sha": {
               "type": "string",
               "description": "Commit SHA"
            }
         }
      },
      "CommitReference": {
         "description": "Details of the commit that introduced the issue or null if the issue was introduced in a commit that Codacy didn't analyze",
         "allOf": [
            {
               "$ref": "#/definitions/CommitIdentification"
            },
            {
               "type": "object",
               "properties": {
                  "commiter": {
                     "type": "string",
                     "description": "Email address of the author of the commit"
                  },
                  "commiterName": {
                     "type": "string",
                     "description": "Name of the author of the commit"
                  },
                  "timestamp": {
                     "type": "string",
                     "format": "date-time",
                     "x-scala-type": "java.time.Instant",
                     "description": "Time and date of the commit",
                     "example": "2019-05-07T14:29:13.430Z"
                  }
               }
            }
         ]
      },
      "CommitIssue": {
         "type": "object",
         "description": "Issue details including the commit that originated the issue",
         "required": [
            "issueId",
            "filePath",
            "fileId",
            "patternInfo",
            "toolInfo",
            "pattern",
            "lineNumber",
            "message",
            "language",
            "lineText"
         ],
         "properties": {
            "issueId": {
               "description": "ID of the Issue",
               "type": "string"
            },
            "filePath": {
               "description": "Path of the file where the issue was found",
               "type": "string"
            },
            "fileId": {
               "type": "integer",
               "format": "int64"
            },
            "patternInfo": {
               "$ref": "#/definitions/PatternDetails"
            },
            "toolInfo": {
               "$ref": "#/definitions/ToolReference"
            },
            "lineNumber": {
               "description": "Line where the issue was found",
               "type": "integer",
               "format": "int64"
            },
            "message": {
               "description": "Detailed cause of the issue",
               "type": "string"
            },
            "language": {
               "description": "Language of the file where the issue was found",
               "type": "string"
            },
            "lineText": {
               "description": "Contents of the line where the issue was found",
               "type": "string"
            },
            "commitInfo": {
               "$ref": "#/definitions/CommitReference"
            }
         }
      },
      "DeltaType": {
         "type": "string",
         "description": "Specifies if the issue was added or fixed by the commit",
         "example": "Added",
         "x-ms-enum": {
            "name": "DeltaType"
         },
         "enum": [
            "Added",
            "Fixed"
         ]
      },
      "CommitDeltaIssue": {
         "type": "object",
         "description": "Details of an issue that was added or fixed by a commit",
         "required": [
            "commitIssue",
            "deltaType"
         ],
         "properties": {
            "commitIssue": {
               "$ref": "#/definitions/CommitIssue"
            },
            "deltaType": {
               "$ref": "#/definitions/DeltaType"
            }
         }
      },
      "CommitDeltaIssuesResponse": {
         "type": "object",
         "description": "List of issues added or fixed on a commit",
         "required": [
            "analyzed",
            "data"
         ],
         "properties": {
            "analyzed": {
               "description": "True if the commit was already analyzed by Codacy",
               "type": "boolean"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CommitDeltaIssue"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "IgnoredIssue": {
         "type": "object",
         "description": "Ignored issue details including the commit that originated the issue",
         "required": [
            "issueId",
            "filePath",
            "patternInfo",
            "toolInfo",
            "pattern",
            "message",
            "language",
            "lineText"
         ],
         "properties": {
            "issueId": {
               "description": "ID of the Issue",
               "type": "string"
            },
            "filePath": {
               "description": "Path of the file where the issue was found and ignored",
               "type": "string"
            },
            "fileId": {
               "type": "integer",
               "format": "int64"
            },
            "patternInfo": {
               "$ref": "#/definitions/PatternDetails"
            },
            "toolInfo": {
               "$ref": "#/definitions/ToolReference"
            },
            "lineNumber": {
               "description": "Line where the issue was found",
               "type": "integer",
               "format": "int64"
            },
            "message": {
               "description": "Detailed cause of the ignored issue",
               "type": "string"
            },
            "language": {
               "description": "Language of the file where the ignored issue was found",
               "type": "string"
            },
            "lineText": {
               "description": "Contents of the line where the ignored issue was found",
               "type": "string"
            },
            "commitInfo": {
               "$ref": "#/definitions/CommitReference"
            }
         }
      },
      "IgnoredIssuesListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/IgnoredIssue"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "SearchRepositoryIssuesListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CommitIssue"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "CommitDeltaStatistics": {
         "type": "object",
         "description": "Delta quality metrics for a commit",
         "required": [
            "commitUuid",
            "newIssues",
            "fixedIssues",
            "analyzed"
         ],
         "properties": {
            "commitUuid": {
               "description": "Unique identifier of the commit",
               "type": "string"
            },
            "newIssues": {
               "description": "Number of issues introduced by the commit",
               "type": "integer",
               "format": "int32"
            },
            "fixedIssues": {
               "description": "Number of issues fixed by the commit",
               "type": "integer",
               "format": "int32"
            },
            "deltaComplexity": {
               "description": "Difference in cyclomatic complexity when compared to the previous commit",
               "type": "integer",
               "format": "int32"
            },
            "deltaCoverage": {
               "description": "Difference in code coverage percentage when compared to the previous commit",
               "type": "integer",
               "format": "int32"
            },
            "deltaCoverageWithDecimals": {
               "description": "Difference in code coverage with decimals percentage when compared to the previous commit",
               "type": "number",
               "multipleOf": 0.01,
               "format": "double",
               "example": 71
            },
            "deltaClonesCount": {
               "description": "Difference in number of duplicated blocks of code when compared to the previous commit",
               "type": "integer",
               "format": "int32"
            },
            "analyzed": {
               "description": "True if the commit was already analyzed by Codacy",
               "type": "boolean"
            }
         }
      },
      "IssuesOverviewResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/IssuesOverview"
            }
         }
      },
      "IssuesOverview": {
         "type": "object",
         "description": "Overview of the issues in a repository",
         "required": [
            "counts"
         ],
         "properties": {
            "counts": {
               "$ref": "#/definitions/IssuesOverviewCounts"
            }
         }
      },
      "IssuesOverviewCounts": {
         "type": "object",
         "description": "Overview of the issues in a repository",
         "required": [
            "categories",
            "languages",
            "levels",
            "patterns",
            "authors"
         ],
         "properties": {
            "categories": {
               "type": "array",
               "description": "Number of issues per category",
               "items": {
                  "$ref": "#/definitions/Count"
               }
            },
            "languages": {
               "type": "array",
               "description": "Number of issues per language",
               "items": {
                  "$ref": "#/definitions/Count"
               }
            },
            "levels": {
               "type": "array",
               "description": "Number of issues per severity level",
               "items": {
                  "$ref": "#/definitions/Count"
               }
            },
            "patterns": {
               "type": "array",
               "description": "Number of issues per code pattern",
               "items": {
                  "$ref": "#/definitions/Count"
               }
            },
            "authors": {
               "type": "array",
               "description": "Number of issues per commit author",
               "items": {
                  "$ref": "#/definitions/Count"
               }
            }
         }
      },
      "Count": {
         "type": "object",
         "required": [
            "name",
            "total"
         ],
         "properties": {
            "name": {
               "type": "string"
            },
            "total": {
               "type": "integer",
               "format": "int32"
            }
         }
      },
      "Branch": {
         "type": "object",
         "required": [
            "id",
            "name",
            "isDefault",
            "isEnabled",
            "branchType"
         ],
         "properties": {
            "id": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "name": {
               "type": "string",
               "example": "master"
            },
            "isDefault": {
               "type": "boolean",
               "example": true
            },
            "isEnabled": {
               "type": "boolean",
               "example": true
            },
            "lastUpdated": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2019-05-07T14:29:13.430Z"
            },
            "branchType": {
               "type": "string",
               "enum": [
                  "Branch",
                  "PullRequest"
               ]
            },
            "lastCommit": {
               "type": "string"
            }
         }
      },
      "BranchListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/Branch"
               }
            }
         }
      },
      "UpdateRepositoryBranchConfigurationBody": {
         "type": "object",
         "description": "Configuration of a repository branch",
         "properties": {
            "isEnabled": {
               "type": "boolean",
               "description": "True if Codacy should analyze the branch",
               "example": true
            }
         }
      },
      "Coverage": {
         "type": "object",
         "properties": {
            "filesUncovered": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "filesWithLowCoverage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "coveragePercentage": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "coveragePercentageWithDecimals": {
               "type": "number",
               "format": "double",
               "example": 15.25
            },
            "numberTotalFiles": {
               "type": "integer",
               "format": "int32",
               "example": 1
            }
         }
      },
      "QualityGate": {
         "type": "object",
         "properties": {
            "issueThreshold": {
               "type": "object",
               "required": [
                  "threshold"
               ],
               "properties": {
                  "threshold": {
                     "type": "integer",
                     "format": "int32",
                     "minimum": 0,
                     "example": 1
                  },
                  "minimumSeverity": {
                     "$ref": "#/definitions/SeverityLevel"
                  }
               },
               "description": "The quality gate will fail if there are new issues of the specified severity over this threshold (if no severity is specified all severity levels are considered). This value cannot be negative"
            },
            "securityIssueThreshold": {
               "type": "integer",
               "format": "int32",
               "minimum": 0,
               "example": 1,
               "description": "The quality gate will fail if the number of new security issues is over this threshold. This value cannot be negative"
            },
            "duplicationThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The quality gate will fail if there are new duplicated blocks over this threshold"
            },
            "coverageThreshold": {
               "type": "integer",
               "format": "int32",
               "maximum": 1,
               "example": 1,
               "description": "[deprecated: use coverageThresholdWithDecimals instead] The quality gate will fail if coverage percentage varies less than this threshold. This value should be at most 1"
            },
            "coverageThresholdWithDecimals": {
               "type": "number",
               "format": "double",
               "example": -0.02,
               "description": "The quality gate will fail if coverage percentage varies less than this threshold. This value should be at most 1.00"
            },
            "diffCoverageThreshold": {
               "type": "integer",
               "format": "int32",
               "maximum": 100,
               "minimum": 0,
               "example": 70,
               "description": "The quality gate will fail if diff coverage is under this threshold. This value should be at least 0 and at most 100"
            },
            "complexityThreshold": {
               "type": "integer",
               "format": "int32",
               "minimum": 0,
               "example": 1,
               "description": "The quality gate will fail if the complexity value is over this threshold. This value cannot be negative"
            }
         }
      },
      "QualitySettingsResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/QualityGate"
            }
         }
      },
      "BuildServerAnalysisSettingRequest": {
         "type": "object",
         "required": [
            "buildServerAnalysisSetting"
         ],
         "properties": {
            "buildServerAnalysisSetting": {
               "type": "boolean",
               "description": "If true, Codacy waits for your build server to upload the results of the local analysis before resuming the analysis of your commits.\nIf false, Codacy analyzes your commits directly on its cloud infrastructure.\n"
            }
         }
      },
      "BuildServerAnalysisSettingResponse": {
         "type": "object",
         "required": [
            "buildServerAnalysisSetting"
         ],
         "properties": {
            "buildServerAnalysisSetting": {
               "type": "boolean",
               "description": "If true, Codacy waits for your build server to upload the results of the local analysis before resuming the analysis of your commits.\nIf false, Codacy analyzes your commits directly on its cloud infrastructure.\n"
            }
         }
      },
      "SyncProviderSettingResponse": {
         "type": "object",
         "required": [
            "name",
            "visibility"
         ],
         "properties": {
            "name": {
               "type": "string",
               "description": "Name of the repository",
               "example": "codacy-eslint"
            },
            "visibility": {
               "$ref": "#/definitions/Visibility"
            }
         }
      },
      "SshKeySettingResponse": {
         "type": "object",
         "required": [
            "publicSshKey"
         ],
         "properties": {
            "publicSshKey": {
               "type": "string",
               "description": "Public SSH key"
            }
         }
      },
      "DeprecatedRepositoryQualitySettings": {
         "type": "object",
         "properties": {
            "issueThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The repository will be considered unhealthy if the percentage of issues is over this threshold"
            },
            "duplicationThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The repository will be considered unhealthy if the percentage of duplication of files is over this threshold"
            },
            "coverageThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The repository will be considered unhealthy if the coverage percentage is under this threshold"
            },
            "complexityThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The repository will be considered unhealthy if the percentage of complexity of files is over this threshold"
            },
            "fileDuplicationThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "A file in this repository will be considered duplicated when the number of cloned blocks is over this threshold"
            },
            "fileComplexityThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "A file in this repository will be considered complex when its complexity value is over this threshold"
            }
         }
      },
      "RepositoryQualitySettings": {
         "type": "object",
         "properties": {
            "maxIssuePercentage": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The repository will be considered unhealthy if the percentage of issues is over this threshold"
            },
            "maxDuplicatedFilesPercentage": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The repository will be considered unhealthy if the percentage of duplication of files is over this threshold"
            },
            "minCoveragePercentage": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The repository will be considered unhealthy if the coverage percentage is under this threshold"
            },
            "maxComplexFilesPercentage": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "description": "The repository will be considered unhealthy if the percentage of complexity of files is over this threshold"
            },
            "fileDuplicationBlockThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "minimum": 0,
               "description": "A file in this repository will be considered duplicated when the number of cloned blocks is over this threshold. This value cannot be negative"
            },
            "fileComplexityValueThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 1,
               "minimum": 0,
               "description": "A file in this repository will be considered complex when its complexity value is over this threshold. This value cannot be negative"
            }
         }
      },
      "DeprecatedRepositoryQualitySettingsResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/DeprecatedRepositoryQualitySettings"
            }
         }
      },
      "RepositoryQualitySettingsResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/RepositoryQualitySettings"
            }
         }
      },
      "ApiToken": {
         "type": "object",
         "description": "API token string value and ID",
         "required": [
            "id",
            "token"
         ],
         "properties": {
            "id": {
               "type": "integer",
               "format": "int64"
            },
            "token": {
               "type": "string"
            }
         }
      },
      "ApiTokenResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/ApiToken"
            }
         }
      },
      "ApiTokenListResponse": {
         "type": "object",
         "description": "List of API tokens",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/ApiToken"
               }
            }
         }
      },
      "ProviderIntegration": {
         "type": "object",
         "required": [
            "provider",
            "redirectUrl"
         ],
         "properties": {
            "provider": {
               "$ref": "#/definitions/AccountProvider"
            },
            "redirectUrl": {
               "type": "string"
            }
         }
      },
      "ProviderIntegrationListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/ProviderIntegration"
               }
            }
         }
      },
      "ConfiguredLoginIntegration": {
         "type": "object",
         "required": [
            "provider",
            "loginUrl"
         ],
         "properties": {
            "provider": {
               "$ref": "#/definitions/AccountProvider"
            },
            "loginUrl": {
               "type": "string"
            }
         }
      },
      "ConfiguredLoginIntegrationListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/ConfiguredLoginIntegration"
               }
            }
         }
      },
      "ConfigurationStatus": {
         "type": "object",
         "required": [
            "title",
            "category",
            "errors"
         ],
         "properties": {
            "title": {
               "type": "string"
            },
            "category": {
               "$ref": "#/definitions/ConfigurationStatusCategory"
            },
            "errors": {
               "type": "array",
               "items": {
                  "type": "string"
               }
            },
            "link": {
               "type": "string"
            }
         }
      },
      "ConfigurationStatusResponse": {
         "type": "object",
         "required": [
            "statuses",
            "metadata"
         ],
         "properties": {
            "statuses": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/ConfigurationStatus"
               }
            },
            "metadata": {
               "type": "object",
               "required": [
                  "firstSignupDone"
               ],
               "properties": {
                  "firstSignupDone": {
                     "type": "boolean"
                  }
               }
            }
         }
      },
      "Reason": {
         "type": "object",
         "required": [
            "title",
            "notes"
         ],
         "properties": {
            "title": {
               "type": "string"
            },
            "notes": {
               "type": "array",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "ChurnFeedback": {
         "type": "object",
         "required": [
            "joinReason",
            "cancelReason"
         ],
         "properties": {
            "joinReason": {
               "$ref": "#/definitions/Reason"
            },
            "cancelReason": {
               "$ref": "#/definitions/Reason"
            }
         }
      },
      "Category": {
         "type": "object",
         "required": [
            "categoryType",
            "name",
            "description"
         ],
         "properties": {
            "categoryType": {
               "type": "string"
            },
            "name": {
               "type": "string"
            },
            "description": {
               "type": "string"
            }
         }
      },
      "CategoryOverview": {
         "type": "object",
         "required": [
            "commitId",
            "category",
            "percentage",
            "totalResults"
         ],
         "properties": {
            "commitId": {
               "type": "integer",
               "format": "int64",
               "example": 1
            },
            "category": {
               "$ref": "#/definitions/Category"
            },
            "percentage": {
               "type": "number",
               "format": "double",
               "example": 1.6
            },
            "totalResults": {
               "type": "integer",
               "format": "int64",
               "example": 1
            }
         }
      },
      "CategoryOverviewListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CategoryOverview"
               }
            }
         }
      },
      "License": {
         "type": "object",
         "required": [
            "numberOfSeats",
            "email",
            "expirationDate"
         ],
         "properties": {
            "numberOfSeats": {
               "type": "integer",
               "format": "int32",
               "example": 100
            },
            "email": {
               "type": "string",
               "example": "name@domain.com"
            },
            "expirationDate": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2019-05-07T14:29:13.430Z"
            },
            "inactivityThreshold": {
               "type": "integer",
               "format": "int32",
               "example": 4
            },
            "autoAddAuthors": {
               "type": "boolean"
            },
            "allowSeatsOverflow": {
               "type": "boolean"
            }
         }
      },
      "LicenseResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "string"
            }
         }
      },
      "DormantAccountInfo": {
         "type": "object",
         "required": [
            "email"
         ],
         "properties": {
            "email": {
               "type": "string",
               "description": "Email address of the deleted account"
            }
         }
      },
      "DeleteDormantAccountsResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/DormantAccountInfo"
               }
            }
         }
      },
      "AddRepositoryBody": {
         "type": "object",
         "required": [
            "repositoryFullPath",
            "provider"
         ],
         "properties": {
            "repositoryFullPath": {
               "type": "string",
               "description": "Full path of the repository on the Git provider, starting at the organization. Separate each segment of the path with a slash (/).",
               "example": "codacy/codacy-analysis-cli"
            },
            "provider": {
               "$ref": "#/definitions/Provider"
            }
         }
      },
      "AddOrganizationBody": {
         "type": "object",
         "required": [
            "provider",
            "remoteIdentifier",
            "name",
            "type"
         ],
         "properties": {
            "provider": {
               "$ref": "#/definitions/Provider"
            },
            "remoteIdentifier": {
               "type": "string"
            },
            "name": {
               "type": "string",
               "example": "FooOrganization"
            },
            "type": {
               "$ref": "#/definitions/OrganizationType"
            }
         }
      },
      "RemovePeopleBody": {
         "type": "object",
         "required": [
            "emails"
         ],
         "properties": {
            "emails": {
               "type": "array",
               "items": {
                  "type": "string"
               },
               "description": "List of emails to add"
            }
         }
      },
      "SearchRepositoryIssuesBody": {
         "type": "object",
         "description": "Search parameters to filter the list of issues in a repository",
         "properties": {
            "branchName": {
               "type": "string",
               "description": "Name of a [repository branch enabled on Codacy](https://docs.codacy.com/repositories-configure/managing-branches/),\nas returned by the endpoint [listRepositoryBranches](#listrepositorybranches).\nBy default, uses the main branch defined on the Codacy repository settings.\n",
               "example": "a-feature-branch-name"
            },
            "patternIds": {
               "type": "array",
               "description": "Set of code pattern identifiers, as returned by the endpoint [listPatterns](#listpatterns)",
               "items": {
                  "type": "string"
               },
               "example": [
                  "ESLint_@typescript-eslint_consistent-indexed-object-style",
                  "ESLint_@typescript-eslint_no-redeclare"
               ]
            },
            "languages": {
               "type": "array",
               "description": "Set of language names, without spaces",
               "items": {
                  "type": "string"
               },
               "example": [
                  "Java",
                  "Scala",
                  "CSS",
                  "ObjectiveC"
               ]
            },
            "categories": {
               "type": "array",
               "description": "Set of issue categories",
               "items": {
                  "type": "string"
               },
               "example": [
                  "Security",
                  "CodeStyle"
               ]
            },
            "levels": {
               "type": "array",
               "description": "Set of issue severity levels",
               "items": {
                  "$ref": "#/definitions/SeverityLevel"
               },
               "example": [
                  "Error",
                  "Warning"
               ]
            },
            "authorEmails": {
               "type": "array",
               "description": "Set of commit author email addresses",
               "items": {
                  "type": "string"
               },
               "example": [
                  "example@mail.com",
                  "another@mail.com"
               ]
            }
         }
      },
      "RemovePeopleEmailStatus": {
         "type": "object",
         "required": [
            "email"
         ],
         "properties": {
            "email": {
               "type": "string"
            },
            "error": {
               "type": "string"
            }
         }
      },
      "RemovePeopleResponse": {
         "type": "object",
         "properties": {
            "success": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/RemovePeopleEmailStatus"
               }
            },
            "failed": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/RemovePeopleEmailStatus"
               }
            }
         }
      },
      "SuggestedAuthorsResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/SuggestedAuthor"
               }
            }
         }
      },
      "RepositorySuggestedAuthorsResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/RepositorySuggestedAuthor"
               }
            }
         }
      },
      "SuggestedAuthor": {
         "type": "object",
         "required": [
            "commitEmail",
            "projectCommitStats",
            "totalProjects",
            "totalCommits"
         ],
         "properties": {
            "commitEmail": {
               "type": "string"
            },
            "totalProjects": {
               "type": "integer",
               "format": "int64"
            },
            "totalCommits": {
               "type": "integer",
               "format": "int64"
            },
            "lastCommit": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant"
            },
            "projectCommitStats": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/ProjectCommitStat"
               }
            }
         }
      },
      "RepositorySuggestedAuthor": {
         "type": "object",
         "required": [
            "commitEmail",
            "projectCommitStat"
         ],
         "properties": {
            "commitEmail": {
               "type": "string"
            },
            "projectCommitStat": {
               "$ref": "#/definitions/ProjectCommitStat"
            }
         }
      },
      "ProjectCommitStat": {
         "type": "object",
         "required": [
            "projectId",
            "numberOfCommits"
         ],
         "properties": {
            "projectId": {
               "type": "integer",
               "format": "int64"
            },
            "firstCommit": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant"
            },
            "lastCommit": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant"
            },
            "numberOfCommits": {
               "type": "integer",
               "format": "int64"
            }
         }
      },
      "AnalysisTool": {
         "type": "object",
         "required": [
            "name",
            "settings",
            "isClientSide"
         ],
         "properties": {
            "name": {
               "type": "string"
            },
            "isClientSide": {
               "type": "boolean"
            },
            "settings": {
               "$ref": "#/definitions/AnalysisToolSettings"
            }
         }
      },
      "AnalysisToolSettings": {
         "type": "object",
         "required": [
            "isEnabled",
            "usesConfigurationFile"
         ],
         "properties": {
            "name": {
               "type": "string"
            },
            "isEnabled": {
               "type": "boolean"
            },
            "usesConfigurationFile": {
               "type": "boolean"
            }
         }
      },
      "CoverageReport": {
         "type": "object",
         "description": "Status and details of a coverage report",
         "required": [
            "createdAt",
            "status",
            "targetCommitSha"
         ],
         "properties": {
            "targetCommitSha": {
               "type": "string",
               "description": "Commit SHA that was referenced as the target for this report"
            },
            "commit": {
               "$ref": "#/definitions/CommitWithBranches"
            },
            "language": {
               "type": "string",
               "description": "Programming language associated with the coverage report"
            },
            "createdAt": {
               "type": "string",
               "description": "Report creation date",
               "format": "date-time",
               "x-scala-type": "java.time.Instant"
            },
            "status": {
               "type": "string",
               "description": "Coverage status",
               "enum": [
                  "Pending",
                  "Processed",
                  "CommitNotAnalysed",
                  "CommitNotFound",
                  "BranchNotEnabled",
                  "MissingFinal"
               ]
            }
         }
      },
      "CoverageReportResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "object",
               "properties": {
                  "hasCoverageOverview": {
                     "type": "boolean",
                     "description": "True if the Quality evolution chart of the repository includes coverage information"
                  },
                  "lastReports": {
                     "type": "array",
                     "items": {
                        "$ref": "#/definitions/CoverageReport"
                     }
                  }
               }
            }
         }
      },
      "ApiError": {
         "type": "object",
         "required": [
            "message",
            "actions"
         ],
         "properties": {
            "message": {
               "type": "string"
            },
            "innerMessage": {
               "type": "string"
            },
            "actions": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/ProblemLink"
               }
            }
         }
      },
      "BadRequest": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "BadRequest"
                  }
               }
            }
         ]
      },
      "Unauthorized": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "Unauthorized"
                  }
               }
            }
         ]
      },
      "PaymentRequired": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "PaymentRequired"
                  }
               }
            }
         ]
      },
      "Forbidden": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "Forbidden"
                  }
               }
            }
         ]
      },
      "NotFound": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "NotFound"
                  }
               }
            }
         ]
      },
      "MethodNotAllowed": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "MethodNotAllowed"
                  }
               }
            }
         ]
      },
      "Conflict": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "Conflict"
                  }
               }
            }
         ]
      },
      "InternalServerError": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "InternalServerError"
                  }
               }
            }
         ]
      },
      "BadGateway": {
         "allOf": [
            {
               "$ref": "#/definitions/ApiError"
            },
            {
               "type": "object",
               "required": [
                  "error"
               ],
               "properties": {
                  "error": {
                     "type": "string",
                     "default": "BadGateway"
                  }
               }
            }
         ]
      },
      "Tool": {
         "description": "Codacy tool that can flag patterns/issues on projects",
         "allOf": [
            {
               "$ref": "#/definitions/ToolReference"
            },
            {
               "type": "object",
               "required": [
                  "version",
                  "shortName",
                  "needsCompilation",
                  "configurationFilenames",
                  "dockerImage",
                  "languages",
                  "clientSide",
                  "standalone",
                  "enabledByDefault",
                  "configurable"
               ],
               "properties": {
                  "version": {
                     "type": "string",
                     "description": "Original tool version used by the Codacy tool wrapper",
                     "example": "6.8.0"
                  },
                  "shortName": {
                     "type": "string",
                     "description": "Tool unique short name, must contain alphanumeric characters only and no spaces",
                     "example": "eslint"
                  },
                  "documentationUrl": {
                     "type": "string",
                     "description": "Original tool documentation URL",
                     "example": "http://eslint.org/docs/rules/"
                  },
                  "sourceCodeUrl": {
                     "type": "string",
                     "description": "Codacy tool wrapper source code URL",
                     "example": "https://github.com/codacy/codacy-eslint"
                  },
                  "prefix": {
                     "type": "string",
                     "description": "Tool prefix used to ensure pattern names are unique",
                     "example": "ESLint_"
                  },
                  "needsCompilation": {
                     "type": "boolean",
                     "description": "Tool requires compilation to run",
                     "example": false
                  },
                  "configurationFilenames": {
                     "type": "array",
                     "description": "Tool configuration filename",
                     "items": {
                        "type": "string"
                     },
                     "example": [
                        ".eslintrc.js",
                        ".eslintrc.yaml"
                     ]
                  },
                  "description": {
                     "type": "string",
                     "description": "Tool description",
                     "example": "ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. In many ways, it is similar to JSLint and JSHint with a few exceptions"
                  },
                  "dockerImage": {
                     "type": "string",
                     "description": "Docker image used to launch tool",
                     "example": "codacy/codacy-eslint:2.20.19"
                  },
                  "languages": {
                     "type": "array",
                     "description": "List of languages that the tool supports",
                     "items": {
                        "type": "string"
                     },
                     "example": [
                        "JavaScript"
                     ]
                  },
                  "clientSide": {
                     "type": "boolean",
                     "description": "True if the tool is supposed to run on the client's machine and the results sent to Codacy",
                     "example": true
                  },
                  "standalone": {
                     "type": "boolean",
                     "description": "True if the client-side tool runs stand-alone outside of the CLI",
                     "example": true
                  },
                  "enabledByDefault": {
                     "type": "boolean",
                     "description": "True if the tool is enabled by default for new projects (not required)",
                     "example": true
                  },
                  "configurable": {
                     "type": "boolean",
                     "description": "True if the tool is configurable on Codacy's UI",
                     "example": true
                  }
               }
            }
         ]
      },
      "ToolListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/Tool"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "DuplicationTool": {
         "description": "Codacy tool that can detect duplication on projects",
         "type": "object",
         "required": [
            "dockerImage",
            "languages"
         ],
         "properties": {
            "dockerImage": {
               "type": "string",
               "description": "Docker image used to launch tool",
               "example": "codacy/codacy-duplication-pmdcpd:1.0.0"
            },
            "languages": {
               "type": "array",
               "description": "List of languages that the tool supports",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "DuplicationToolListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/DuplicationTool"
               }
            }
         }
      },
      "MetricsTool": {
         "description": "Codacy tool that calculates metrics on projects",
         "type": "object",
         "required": [
            "dockerImage",
            "languages"
         ],
         "properties": {
            "dockerImage": {
               "type": "string",
               "description": "Docker image used to launch tool",
               "example": "codacy/codacy-metrics-cloc:1.0.0"
            },
            "languages": {
               "type": "array",
               "description": "List of languages that the tool supports",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "MetricsToolListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/MetricsTool"
               }
            }
         }
      },
      "AnalysisToolsResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/AnalysisTool"
               }
            }
         }
      },
      "Pattern": {
         "description": "Code pattern that a Codacy tool can use to find issues",
         "allOf": [
            {
               "$ref": "#/definitions/PatternDetails"
            },
            {
               "type": "object",
               "required": [
                  "enabled",
                  "parameters"
               ],
               "properties": {
                  "description": {
                     "type": "string",
                     "description": "Short description of the code pattern",
                     "example": "Enforce getter and setter pairs in objects and classes"
                  },
                  "explanation": {
                     "type": "string",
                     "description": "Full description of the code pattern, in CommonMark",
                     "example": "Accessor pairs description"
                  },
                  "enabled": {
                     "type": "boolean",
                     "description": "True if the code pattern is on by default for new repositories",
                     "example": true
                  },
                  "languages": {
                     "type": "array",
                     "description": "List of languages that the code pattern supports",
                     "items": {
                        "type": "string"
                     },
                     "example": [
                        "JavaScript"
                     ]
                  },
                  "timeToFix": {
                     "type": "integer",
                     "format": "int32",
                     "description": "Average time to fix an issue detected by the code pattern, in minutes",
                     "example": 5
                  },
                  "parameters": {
                     "$ref": "#/definitions/ParameterList"
                  }
               }
            }
         ]
      },
      "PatternListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/Pattern"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "Parameter": {
         "type": "object",
         "description": "Parameter to configure a code pattern",
         "required": [
            "name",
            "default"
         ],
         "properties": {
            "name": {
               "type": "string",
               "description": "Name of the parameter",
               "example": "getWithoutSet"
            },
            "description": {
               "type": "string",
               "description": "Description of the parameter",
               "example": "getWithoutSet"
            },
            "default": {
               "type": "string",
               "description": "Default value of the parameter",
               "example": "true"
            }
         }
      },
      "ParameterList": {
         "type": "array",
         "items": {
            "$ref": "#/definitions/Parameter"
         }
      },
      "Person": {
         "type": "object",
         "description": "Representation of a person that belongs to an organization",
         "required": [
            "email"
         ],
         "properties": {
            "name": {
               "type": "string",
               "description": "The name of the person",
               "example": "John Smith"
            },
            "email": {
               "type": "string",
               "description": "The email of the person",
               "example": "johnsmith@emailprovider.com"
            },
            "lastLogin": {
               "type": "string",
               "format": "date-time",
               "x-scala-type": "java.time.Instant",
               "example": "2020-11-05T15:39:13.430Z"
            }
         }
      },
      "ListPeopleResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/Person"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "PersonPermission": {
         "type": "object",
         "required": [
            "email",
            "permission"
         ],
         "properties": {
            "email": {
               "type": "string",
               "description": "The email of the person",
               "example": "johnsmith@emailprovider.com"
            },
            "permission": {
               "$ref": "#/definitions/UserRole"
            }
         }
      },
      "PersonPermissionResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/PersonPermission"
            }
         }
      },
      "LeaveOrgProblem": {
         "type": "object",
         "required": [
            "actions",
            "code"
         ],
         "properties": {
            "actions": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/ProblemLink"
               }
            },
            "code": {
               "type": "string",
               "description": "A stable identifier for a problem.",
               "example": "last_admin_credit"
            }
         }
      },
      "LeaveOrgCheckResult": {
         "type": "object",
         "description": "Informs if the user can leave the organization and if not, why.",
         "required": [
            "canLeave",
            "message"
         ],
         "properties": {
            "canLeave": {
               "type": "boolean",
               "description": "True if user can leave the organization",
               "example": true
            },
            "message": {
               "type": "string",
               "example": "Since you are the last owner on $orgName, to leave this organization you need to delete it. Please, contact us through support."
            },
            "reason": {
               "$ref": "#/definitions/LeaveOrgProblem"
            }
         }
      },
      "FileWithAnalysisInfo": {
         "type": "object",
         "description": "File with analysis information",
         "required": [
            "fileId",
            "branchId",
            "path",
            "totalIssues",
            "grade",
            "gradeLetter",
            "numberOfMethods"
         ],
         "properties": {
            "fileId": {
               "type": "integer",
               "format": "int64",
               "description": "Identifier for file in any branch",
               "example": 2
            },
            "branchId": {
               "type": "integer",
               "format": "int64",
               "description": "Identifier for the branch the file belongs to",
               "example": 3
            },
            "path": {
               "type": "string",
               "description": "Relative path of the file in the repository",
               "example": "/src/test.go"
            },
            "totalIssues": {
               "type": "integer",
               "format": "int32",
               "description": "Number of issues in the file",
               "example": 42
            },
            "complexity": {
               "type": "integer",
               "format": "int32",
               "description": "Complexity level of the file",
               "example": 3
            },
            "grade": {
               "type": "integer",
               "format": "int32",
               "description": "Quality grade of the file as a number between 100 (highest grade) and 0 (lowest grade)",
               "example": 74
            },
            "gradeLetter": {
               "type": "string",
               "description": "Quality grade of the file as a letter between A (highest grade) and F (lowest grade)",
               "example": "A"
            },
            "coverage": {
               "type": "integer",
               "format": "int32",
               "description": "[deprecated: use coverageWithDecimals instead] Test coverage percentage of the file",
               "example": 71
            },
            "coverageWithDecimals": {
               "type": "number",
               "multipleOf": 0.01,
               "format": "double",
               "description": "Test coverage percentage of the file with decimals",
               "example": 71
            },
            "duplication": {
               "type": "integer",
               "format": "int32",
               "description": "Number of duplicated lines in the file",
               "example": 7
            },
            "linesOfCode": {
               "type": "integer",
               "format": "int32",
               "description": "Lines of code in the file",
               "example": 123
            },
            "sourceLinesOfCode": {
               "type": "integer",
               "format": "int32",
               "description": "Coverable lines of code in the file",
               "example": 90
            },
            "numberOfMethods": {
               "type": "integer",
               "format": "int32",
               "description": "Number of methods in the file",
               "example": 12
            },
            "numberOfClones": {
               "type": "integer",
               "format": "int32",
               "description": "Number of cloned blocks of code in the file",
               "example": 5
            }
         }
      },
      "FileListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/FileWithAnalysisInfo"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "CopyPatternsBody": {
         "type": "object",
         "required": [
            "targetRepositories"
         ],
         "properties": {
            "targetRepositories": {
               "type": "array",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "CopyPatternsResponse": {
         "type": "object",
         "properties": {
            "success": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CopyPatternsStatus"
               }
            },
            "failed": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CopyPatternsStatus"
               }
            }
         }
      },
      "CopyPatternsStatus": {
         "type": "object",
         "required": [
            "repositoryName"
         ],
         "properties": {
            "repositoryName": {
               "type": "string"
            },
            "error": {
               "type": "string"
            }
         }
      },
      "Language": {
         "type": "object",
         "description": "Language information",
         "required": [
            "name"
         ],
         "properties": {
            "name": {
               "type": "string",
               "description": "name of the language",
               "example": "Scala"
            }
         }
      },
      "LanguageListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/Language"
               }
            }
         }
      },
      "CreateCodingStandardBody": {
         "type": "object",
         "description": "Details of a new coding standard",
         "required": [
            "name",
            "languages"
         ],
         "properties": {
            "name": {
               "type": "string",
               "description": "Name of the new coding standard",
               "example": "Coding style conventions"
            },
            "languages": {
               "type": "array",
               "items": {
                  "type": "string"
               },
               "description": "List of programming languages supported by the new coding standard",
               "example": [
                  "Java",
                  "Go"
               ]
            }
         }
      },
      "SetDefaultCodingStandardBody": {
         "type": "object",
         "description": "Toggle the default coding standard for an organization",
         "required": [
            "isDefault"
         ],
         "properties": {
            "isDefault": {
               "type": "boolean",
               "description": "True if the coding standard is the default for the organization"
            }
         }
      },
      "ApplyCodingStandardToRepositoriesBody": {
         "type": "object",
         "description": "Names of the repositories to link or unlink from a coding standard",
         "required": [
            "link",
            "unlink"
         ],
         "properties": {
            "link": {
               "type": "array",
               "description": "Names of the repositories to link to a coding standard",
               "items": {
                  "type": "string"
               }
            },
            "unlink": {
               "type": "array",
               "description": "Names of the repositories to unlink from a coding standard",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "UpdateCodingStandardPatternsBody": {
         "type": "object",
         "description": "Specifies the update to apply to the code patterns of a tool in a coding standard",
         "required": [
            "enabled"
         ],
         "properties": {
            "enabled": {
               "type": "boolean",
               "description": "True enables the code patterns, and False disables them."
            }
         }
      },
      "CodingStandardMeta": {
         "type": "object",
         "description": "Meta information about a coding standard",
         "required": [
            "enabledToolsCount",
            "enabledPatternsCount",
            "linkedRepositoriesCount"
         ],
         "properties": {
            "enabledToolsCount": {
               "type": "integer",
               "format": "int32",
               "description": "Number of tools that are enabled in the coding standard"
            },
            "enabledPatternsCount": {
               "type": "integer",
               "format": "int32",
               "description": "Number of code patterns that are enabled in the coding standard"
            },
            "linkedRepositoriesCount": {
               "type": "integer",
               "format": "int32",
               "description": "Number of repositories using the coding standard"
            }
         }
      },
      "CodingStandard": {
         "type": "object",
         "description": "Coding standard for an organization",
         "required": [
            "id",
            "name",
            "isDraft",
            "isDefault",
            "languages",
            "meta"
         ],
         "properties": {
            "id": {
               "type": "integer",
               "format": "int64",
               "description": "Identifier of the coding standard"
            },
            "name": {
               "type": "string",
               "description": "Name of the coding standard"
            },
            "isDraft": {
               "type": "boolean",
               "description": "True if the coding standard is a draft"
            },
            "isDefault": {
               "type": "boolean",
               "description": "True if the coding standard is the default for the organization"
            },
            "languages": {
               "type": "array",
               "description": "List of programming languages supported by the coding standard",
               "items": {
                  "type": "string"
               }
            },
            "meta": {
               "$ref": "#/definitions/CodingStandardMeta"
            }
         }
      },
      "CodingStandardTool": {
         "type": "object",
         "description": "Information about a tool in a coding standard",
         "required": [
            "codingStandardId",
            "uuid",
            "isEnabled"
         ],
         "properties": {
            "codingStandardId": {
               "type": "integer",
               "format": "int64",
               "description": "Coding standard identifier"
            },
            "uuid": {
               "type": "string",
               "description": "Unique identifier of the tool",
               "example": "847feb32-9ff2-11ea-bb37-0242ac130002"
            },
            "isEnabled": {
               "type": "boolean",
               "description": "True if the tool is enabled in the coding standard",
               "example": true
            }
         }
      },
      "CodingStandardResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/CodingStandard"
            }
         }
      },
      "CodingStandardsListResponse": {
         "type": "object",
         "description": "List of coding standards for an organization",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CodingStandard"
               }
            }
         }
      },
      "CodingStandardToolsListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CodingStandardTool"
               }
            }
         }
      },
      "CodingStandardPatternsListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "items": {
                  "$ref": "#/definitions/CodingStandardPattern"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            },
            "meta": {
               "$ref": "#/definitions/StandardPatternListMeta"
            }
         }
      },
      "ApplyCodingStandardToRepositoriesResult": {
         "description": "Result of applying a coding standard to a list of repositories",
         "required": [
            "successful",
            "failed"
         ],
         "properties": {
            "successful": {
               "type": "array",
               "description": "Names of the repositories that were successfully linked or unlinked from a coding standard",
               "items": {
                  "type": "string"
               }
            },
            "failed": {
               "type": "array",
               "description": "Names of the repositories that failed to be linked or unlinked from a coding standard",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "ApplyCodingStandardToRepositoriesResultResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "$ref": "#/definitions/ApplyCodingStandardToRepositoriesResult"
            }
         }
      },
      "CodingStandardPattern": {
         "description": "Code pattern configuration for a tool in a coding standard",
         "required": [
            "patternDefinition",
            "enabled",
            "parameters"
         ],
         "properties": {
            "patternDefinition": {
               "$ref": "#/definitions/Pattern"
            },
            "enabled": {
               "type": "boolean",
               "description": "True if the code pattern is enabled in the coding standard",
               "example": true
            },
            "parameters": {
               "$ref": "#/definitions/CodingStandardParametersList"
            }
         }
      },
      "StandardPatternListMeta": {
         "type": "object",
         "description": "Metadata for a retrieved coding standard's pattern list",
         "required": [
            "totalEnabled"
         ],
         "properties": {
            "totalEnabled": {
               "type": "integer",
               "format": "int32",
               "description": "Total number of enabled patterns",
               "default": 0,
               "example": 35
            }
         }
      },
      "CodingStandardParametersList": {
         "type": "array",
         "items": {
            "$ref": "#/definitions/CodingStandardParameter"
         }
      },
      "RepositoryIdentification": {
         "description": "Identifier and name of a repository using a coding standard",
         "type": "object",
         "required": [
            "repositoryId",
            "name"
         ],
         "properties": {
            "repositoryId": {
               "type": "integer",
               "format": "int64",
               "description": "Identifier of the repository"
            },
            "name": {
               "type": "string",
               "description": "Name of the repository",
               "example": "codacy-eslint"
            }
         }
      },
      "CodingStandardRepositoriesListResponse": {
         "type": "object",
         "required": [
            "data"
         ],
         "properties": {
            "data": {
               "type": "array",
               "description": "List of repositories using a coding standard",
               "items": {
                  "$ref": "#/definitions/RepositoryIdentification"
               }
            },
            "pagination": {
               "$ref": "#/definitions/PaginationInfo"
            }
         }
      },
      "CodingStandardParameter": {
         "type": "object",
         "description": "Parameter to configure a code pattern for a tool in a coding standard",
         "required": [
            "name",
            "value"
         ],
         "properties": {
            "name": {
               "type": "string",
               "description": "Code pattern parameter name",
               "example": "getWithoutSet"
            },
            "value": {
               "type": "string",
               "description": "Code pattern parameter value",
               "example": "true"
            }
         }
      },
      "ToolConfiguration": {
         "description": "Configuration of a tool and its code patterns",
         "required": [
            "patterns"
         ],
         "properties": {
            "enabled": {
               "type": "boolean",
               "description": "True if the tool is enabled in the repository or coding standard",
               "example": true
            },
            "patterns": {
               "type": "array",
               "description": "List of code pattern configurations",
               "items": {
                  "$ref": "#/definitions/PatternConfiguration"
               }
            }
         }
      },
      "PatternConfiguration": {
         "description": "Code pattern configuration",
         "required": [
            "id"
         ],
         "properties": {
            "id": {
               "type": "string",
               "description": "Code pattern unique identifier",
               "example": "ESLint_@typescript-eslint_no-shadow"
            },
            "enabled": {
               "type": "boolean",
               "description": "True if the code pattern is enabled in the repository or coding standard",
               "example": true
            },
            "parameters": {
               "type": "array",
               "description": "List of code pattern parameter configurations",
               "items": {
                  "$ref": "#/definitions/CodingStandardParameter"
               }
            }
         }
      },
      "SearchOrganizationRepositoriesWithAnalysis": {
         "description": "Search organization repositories with analysis query body",
         "properties": {
            "names": {
               "type": "array",
               "description": "List of repository names",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "FileExtensionsResponse": {
         "type": "object",
         "required": [
            "languagesExtensions"
         ],
         "properties": {
            "languagesExtensions": {
               "type": "array",
               "description": "List of languages with supported extensions",
               "items": {
                  "$ref": "#/definitions/FileExtensions"
               }
            }
         }
      },
      "FileExtensions": {
         "description": "List of supported file extensions for a specific language",
         "required": [
            "name",
            "codacyDefaults",
            "extensions"
         ],
         "properties": {
            "name": {
               "type": "string",
               "description": "Language name"
            },
            "codacyDefaults": {
               "type": "array",
               "description": "Default Codacy extensions for the language",
               "items": {
                  "type": "string"
               }
            },
            "extensions": {
               "type": "array",
               "description": "List of custom extensions for the language",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "FileExtensionsUpdate": {
         "type": "object",
         "required": [
            "name",
            "extensions"
         ],
         "properties": {
            "name": {
               "type": "string",
               "description": "Language name"
            },
            "extensions": {
               "type": "array",
               "description": "List of custom file extensions for the language",
               "items": {
                  "type": "string"
               }
            }
         }
      },
      "FileExtensionsBody": {
         "type": "object",
         "required": [
            "languagesExtensions"
         ],
         "properties": {
            "languagesExtensions": {
               "type": "array",
               "description": "List of custom file extensions to associate with each language for a repository",
               "items": {
                  "$ref": "#/definitions/FileExtensionsUpdate"
               }
            }
         }
      }
   },
   "responses": {
      "BadRequest": {
         "description": "Bad Request",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/BadRequest"
         }
      },
      "Unauthorized": {
         "description": "Unauthorized",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/Unauthorized"
         }
      },
      "PaymentRequired": {
         "description": "PaymentRequired",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/PaymentRequired"
         }
      },
      "Forbidden": {
         "description": "Forbidden",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/Forbidden"
         }
      },
      "NotFound": {
         "description": "Not Found",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/NotFound"
         }
      },
      "MethodNotAllowed": {
         "description": "Method Not Allowed",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/MethodNotAllowed"
         }
      },
      "Conflict": {
         "description": "Conflict",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/Conflict"
         }
      },
      "InternalServerError": {
         "description": "Internal Server Error",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/InternalServerError"
         }
      },
      "BadGateway": {
         "description": "Bad Gateway",
         "x-ms-error-response": true,
         "schema": {
            "$ref": "#/definitions/BadGateway"
         }
      }
   },
   "parameters": {
      "cursorParam": {
         "in": "query",
         "name": "cursor",
         "required": false,
         "type": "string",
         "description": "Cursor to return next items in the list",
         "x-example": "Yms345gh==",
         "x-ms-parameter-location": "method"
      },
      "limitParam": {
         "in": "query",
         "name": "limit",
         "required": false,
         "type": "integer",
         "format": "int32",
         "minimum": 1,
         "maximum": 100,
         "default": 100,
         "description": "Maximum number of items to return",
         "x-example": 20,
         "x-ms-parameter-location": "method"
      },
      "daysParam": {
         "in": "query",
         "name": "days",
         "required": false,
         "type": "integer",
         "format": "int32",
         "minimum": 1,
         "maximum": 365,
         "default": 31,
         "description": "Number of days with data to return.",
         "x-example": 31,
         "x-ms-parameter-location": "method"
      },
      "providerParam": {
         "in": "path",
         "name": "provider",
         "description": "Git provider",
         "required": true,
         "type": "string",
         "enum": [
            "bb",
            "gh",
            "gl"
         ],
         "x-example": "gh",
         "x-ms-parameter-location": "method",
         "x-ms-enum": {
            "name": "Provider"
         }
      },
      "accountProviderParam": {
         "in": "path",
         "name": "accountProvider",
         "description": "Account Provider",
         "required": true,
         "type": "string",
         "enum": [
            "github",
            "google",
            "bitbucket",
            "gitlab"
         ],
         "x-example": "github",
         "x-ms-parameter-location": "method",
         "x-ms-enum": {
            "name": "AccountProvider"
         }
      },
      "accountIdentifierParam": {
         "in": "path",
         "name": "accountIdentifier",
         "description": "Account Identifier",
         "required": true,
         "type": "integer",
         "format": "int64",
         "x-ms-parameter-location": "method"
      },
      "tokenIdParam": {
         "in": "path",
         "name": "tokenId",
         "description": "API token ID",
         "required": true,
         "type": "integer",
         "format": "int64",
         "x-example": 30,
         "x-ms-parameter-location": "method"
      },
      "toolUuidParam": {
         "in": "path",
         "name": "toolUuid",
         "description": "Tool unique identifier",
         "required": true,
         "type": "string",
         "x-example": "847feb32-9ff2-11ea-bb37-0242ac130002",
         "x-ms-parameter-location": "method"
      },
      "searchParam": {
         "in": "query",
         "name": "search",
         "required": false,
         "type": "string",
         "description": "Filter the results searching by this string.",
         "x-example": "my-repository-name",
         "x-ms-parameter-location": "method"
      },
      "repositoriesParam": {
         "in": "query",
         "name": "repositories",
         "required": false,
         "type": "string",
         "description": "[Deprecated: Use [SearchOrganizationRepositoriesWithAnalysis](#searchorganizationrepositorieswithanalysis) instead] Comma separated list of repositories to get",
         "x-example": "codacy-eslint,codacy-pmd",
         "x-ms-parameter-location": "method"
      },
      "branchStatusParam": {
         "in": "query",
         "name": "enabled",
         "required": false,
         "type": "boolean",
         "description": "Returns only the enabled or disabled branches.",
         "x-ms-parameter-location": "method"
      },
      "remoteOrganizationNameParam": {
         "in": "path",
         "name": "remoteOrganizationName",
         "description": "Organization name on the Git provider",
         "required": true,
         "type": "string",
         "x-example": "codacy",
         "x-ms-parameter-location": "method"
      },
      "repositoryNameParam": {
         "in": "path",
         "name": "repositoryName",
         "description": "Repository name on the Git provider organization",
         "required": true,
         "type": "string",
         "x-example": "awesome-repo",
         "x-ms-parameter-location": "method"
      },
      "branchNamePathParam": {
         "in": "path",
         "name": "branchName",
         "description": "Repository branch name",
         "required": true,
         "type": "string",
         "x-example": "master",
         "x-ms-parameter-location": "method"
      },
      "branchNameParam": {
         "in": "query",
         "name": "branch",
         "description": "Name of a [repository branch enabled on Codacy](https://docs.codacy.com/repositories-configure/managing-branches/),\nas returned by the endpoint [listRepositoryBranches](#listrepositorybranches).\nBy default, uses the main branch defined on the Codacy repository settings.\n",
         "required": false,
         "type": "string",
         "x-example": "master",
         "x-ms-parameter-location": "method"
      },
      "churnFeedbackParam": {
         "in": "body",
         "name": "reasons",
         "description": "Reasons",
         "required": false,
         "schema": {
            "$ref": "#/definitions/ChurnFeedback"
         }
      },
      "repositoryFilter": {
         "in": "query",
         "name": "filter",
         "description": "RepositoryFilter",
         "required": false,
         "type": "string",
         "enum": [
            "Synced",
            "NotSynced"
         ],
         "x-example": "Synced",
         "x-ms-parameter-location": "method",
         "x-ms-enum": {
            "name": "RepositoryFilter"
         }
      },
      "languagesFilter": {
         "in": "query",
         "name": "languages",
         "description": "Languages filter",
         "required": false,
         "type": "string",
         "x-example": "Scala,Java,Javascript",
         "x-ms-parameter-location": "method"
      },
      "emailFilterParam": {
         "in": "query",
         "name": "email",
         "description": "Email filter",
         "required": true,
         "type": "string",
         "x-example": "mail@codacy.com",
         "x-ms-parameter-location": "method"
      },
      "emailListParam": {
         "in": "body",
         "name": "emailList",
         "description": "List of emails",
         "required": true,
         "schema": {
            "type": "array",
            "items": {
               "type": "string"
            }
         }
      },
      "filesSearchFilter": {
         "in": "query",
         "name": "search",
         "description": "Filter files that include this string anywhere in their relative path",
         "required": false,
         "type": "string",
         "x-example": "file.js",
         "x-ms-parameter-location": "method"
      },
      "searchIssuesFilter": {
         "in": "body",
         "name": "filters",
         "description": "Only return issues matching these filters",
         "schema": {
            "$ref": "#/definitions/SearchRepositoryIssuesBody"
         }
      },
      "commitUuid": {
         "in": "path",
         "name": "commitUuid",
         "description": "UUID or SHA string that identifies the commit",
         "required": true,
         "type": "string",
         "x-example": "2957025d42e8daadf937d4044516f991d21deea4",
         "x-ms-parameter-location": "method"
      },
      "pullRequestNumberParam": {
         "in": "path",
         "name": "pullRequestNumber",
         "description": "Pull request number",
         "required": true,
         "type": "integer",
         "format": "int32",
         "x-example": 738490,
         "x-ms-parameter-location": "method"
      },
      "codingStandardIdParam": {
         "in": "path",
         "name": "codingStandardId",
         "description": "Coding standard identifier",
         "required": true,
         "type": "integer",
         "format": "int64",
         "x-example": 1,
         "x-ms-parameter-location": "method"
      },
      "severityLevelsParam": {
         "in": "query",
         "name": "severityLevels",
         "description": "Filter by a comma separated list of code pattern severity levels. The allowed values are 'Error', 'Warning', and 'Info'",
         "required": false,
         "type": "string",
         "x-example": "Error,Warning",
         "x-ms-parameter-location": "method"
      },
      "categoriesParam": {
         "in": "query",
         "name": "categories",
         "description": "Filter by a comma separated list of code pattern categories. The allowed values are 'Security', 'ErrorProne', 'CodeStyle', 'Compatibility', 'UnusedCode', and 'Performance'",
         "required": false,
         "type": "string",
         "x-example": "Security,ErrorProne",
         "x-ms-parameter-location": "method"
      },
      "patternsSortParam": {
         "in": "query",
         "name": "sort",
         "description": "Field used to sort the tool's code patterns.  The allowed values are 'category', 'recommended', and 'severity'",
         "required": false,
         "type": "string",
         "x-example": "category",
         "x-ms-parameter-location": "method"
      },
      "directionParam": {
         "in": "query",
         "name": "direction",
         "description": "Sort direction. Possible values are 'asc' (ascending) or 'desc' (descending).",
         "required": false,
         "type": "string",
         "x-example": "desc",
         "x-ms-parameter-location": "method"
      },
      "sourceRepositoryParam": {
         "in": "query",
         "name": "sourceRepository",
         "description": "Name of a repository in the same organization to use as a template when creating the new coding standard",
         "required": false,
         "type": "string",
         "x-ms-parameter-location": "method"
      },
      "sourceCodingStandardParam": {
         "in": "query",
         "name": "sourceCodingStandard",
         "description": "Identifier of an existing coding standard to use as a template when creating the new coding standard, including the enabled repositories",
         "required": false,
         "type": "integer",
         "format": "int64",
         "x-example": 1,
         "x-ms-parameter-location": "method"
      },
      "toolConfigurationParam": {
         "in": "body",
         "name": "toolConfiguration",
         "description": "Configuration of a tool and its code patterns",
         "required": true,
         "schema": {
            "$ref": "#/definitions/ToolConfiguration"
         }
      },
      "filesSortParam": {
         "in": "query",
         "name": "sort",
         "description": "Field used to sort the list of files. The allowed values are 'filename', 'issues', 'grade', 'duplication', 'complexity', and 'coverage'.",
         "required": false,
         "type": "string",
         "x-example": "category",
         "x-ms-parameter-location": "method"
      },
      "branchesSortParam": {
         "in": "query",
         "name": "sort",
         "description": "Field used to sort the list of branches. The allowed values are 'name' and 'last-updated'.",
         "required": false,
         "type": "string",
         "x-example": "category",
         "x-ms-parameter-location": "method"
      }
   },
   "security": [
      {
         "ApiKeyAuth": []
      }
   ],
   "tags": [
      {
         "name": "version"
      },
      {
         "name": "analysis"
      },
      {
         "name": "repository"
      },
      {
         "name": "account"
      },
      {
         "name": "organization"
      },
      {
         "name": "people"
      },
      {
         "name": "billing"
      },
      {
         "name": "integrations"
      },
      {
         "name": "configuration"
      },
      {
         "name": "health"
      },
      {
         "name": "admin"
      },
      {
         "name": "languages"
      },
      {
         "name": "tools"
      },
      {
         "name": "coding standards"
      },
      {
         "name": "file"
      }
   ],
   "paths": {
      "/version": {
         "get": {
            "tags": [
               "version"
            ],
            "x-jvm-package": "version",
            "summary": "Return the version of the Codacy installation",
            "operationId": "getVersion",
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/Version"
                  }
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "List an organization repositories with analysis information for the authenticated user.",
            "description": "List an organization repositories with analysis information for the authenticated user. For Bitbucket you must URL encode the cursor before using it in subsequent API calls, as the pagination comes directly from the Git provider.",
            "operationId": "listOrganizationRepositoriesWithAnalysis",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "repositories",
                  "required": false,
                  "type": "string",
                  "description": "[Deprecated: Use [SearchOrganizationRepositoriesWithAnalysis](#searchorganizationrepositorieswithanalysis) instead] Comma separated list of repositories to get",
                  "x-example": "codacy-eslint,codacy-pmd",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/RepositoryWithAnalysisListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               },
               "502": {
                  "$ref": "#/responses/BadGateway"
               }
            }
         }
      },
      "/search/analysis/organizations/{provider}/{remoteOrganizationName}/repositories": {
         "post": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Search organization repositories with analysis information for the authenticated user.",
            "description": "For Bitbucket you must URL encode the cursor before using it in subsequent API calls, as the pagination comes directly from the Git provider.",
            "operationId": "searchOrganizationRepositoriesWithAnalysis",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "searchOrganizationRepositoriesWithAnalysisBody",
                  "description": "Search query body",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/SearchOrganizationRepositoriesWithAnalysis"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/RepositoryWithAnalysisListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               },
               "502": {
                  "$ref": "#/responses/BadGateway"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Get a repository with analysis information for the authenticated user",
            "operationId": "getRepositoryWithAnalysis",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "branch",
                  "description": "Name of a [repository branch enabled on Codacy](https://docs.codacy.com/repositories-configure/managing-branches/),\nas returned by the endpoint [listRepositoryBranches](#listrepositorybranches).\nBy default, uses the main branch defined on the Codacy repository settings.\n",
                  "required": false,
                  "type": "string",
                  "x-example": "master",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/RepositoryWithAnalysisResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/tools": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Get analysis tools settings of a repository",
            "operationId": "getTools",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/AnalysisToolsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/analysis-progress": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Get the analysis progress of a repository",
            "operationId": "getFirstAnalysisOverview",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "branch",
                  "description": "Name of a [repository branch enabled on Codacy](https://docs.codacy.com/repositories-configure/managing-branches/),\nas returned by the endpoint [listRepositoryBranches](#listrepositorybranches).\nBy default, uses the main branch defined on the Codacy repository settings.\n",
                  "required": false,
                  "type": "string",
                  "x-example": "master",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/FirstAnalysisOverviewResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/patterns/copy": {
         "post": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Bulk copy the patterns from a given repository",
            "description": "Copy patterns from the selected repository to the targeted ones requested in the body of the operation.\nThis endpoints is limited to 100 target repositories.\n",
            "operationId": "copyPatternsBulk",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "copyPatternsBulkBody",
                  "description": "Repository names to have their patterns imported to, maximum 100 items.",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CopyPatternsBody"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/CopyPatternsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "409": {
                  "$ref": "#/responses/Conflict"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/pull-requests": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "List pull requests from a repository that the user as access to",
            "description": "You can search this endpoint for either `last-updated` (default), `impact` or `merged`",
            "operationId": "listRepositoryPullRequests",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "includeNotAnalyzed",
                  "description": "If true, also return pull requests that weren't analyzed",
                  "type": "boolean",
                  "required": false,
                  "default": false
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/PullRequestWithAnalysisListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/pull-requests/{pullRequestNumber}": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Get pull request from a repository",
            "operationId": "getRepositoryPullRequest",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "pullRequestNumber",
                  "description": "Pull request number",
                  "required": true,
                  "type": "integer",
                  "format": "int32",
                  "x-example": 738490,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/PullRequestWithAnalysis"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/quality-settings": {
         "get": {
            "deprecated": true,
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "[Deprecated: use [getQualitySettingsForRepository](#getqualitysettingsforrepository) instead]\nGet quality settings for the specific repository\n",
            "operationId": "getRepositoryQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/DeprecatedRepositoryQualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/quality/repository": {
         "get": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Get quality settings for the specific repository",
            "operationId": "getQualitySettingsForRepository",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/RepositoryQualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "put": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Update quality settings for the specific repository",
            "operationId": "updateRepositoryQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "updatedQualitySettings",
                  "description": "The new value for the quality settings of the repository",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/RepositoryQualitySettings"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/RepositoryQualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/ssh-user-key": {
         "post": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Regenerate the user SSH key that Codacy uses to clone the repository",
            "description": "Codacy automatically adds the new public user SSH key to the user account on the Git provider. Using a user SSH key is recommended if your repository includes submodules.",
            "operationId": "regenerateUserSshKey",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/SshKeySettingResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/ssh-repository-key": {
         "post": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Regenerate the SSH key that Codacy uses to clone the repository",
            "description": "Codacy automatically adds the new public SSH key to the repository on the Git provider.",
            "operationId": "regenerateRepositorySshKey",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/SshKeySettingResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/stored-ssh-key": {
         "get": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Get the public SSH key for the repository",
            "description": "Returns the most recently generated public SSH key, which can be either a user or repository SSH key.",
            "operationId": "getRepositoryPublicSshKey",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/SshKeySettingResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/sync": {
         "post": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Synchronize project name and visibility with Git provider",
            "operationId": "syncRepositoryWithProvider",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/SyncProviderSettingResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/analysis": {
         "get": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Get the status of the repository setting **Run analysis on your build server**",
            "operationId": "getBuildServerAnalysisSetting",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/BuildServerAnalysisSettingResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "405": {
                  "$ref": "#/responses/MethodNotAllowed"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "patch": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Updates the status of the repository setting **Run analysis on your build server**",
            "operationId": "updateBuildServerAnalysisSetting",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "targetBuildServerAnalysisSetting",
                  "description": "New value for the repository setting **Run analysis on your build server**",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/BuildServerAnalysisSettingRequest"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/BuildServerAnalysisSettingResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "405": {
                  "$ref": "#/responses/MethodNotAllowed"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/file-extensions": {
         "get": {
            "tags": [
               "file"
            ],
            "x-jvm-package": "fileExtension",
            "summary": "Get the list of supported file extensions associated with each language in a repository",
            "operationId": "getFileExtensionsSettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/FileExtensionsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "patch": {
            "tags": [
               "file"
            ],
            "x-jvm-package": "fileExtension",
            "summary": "Update the custom file extensions for a repository",
            "operationId": "patchFileExtensionsSettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "FileExtensionsBody",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/FileExtensionsBody"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/quality/commits": {
         "get": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Get quality settings for the commits of a repository.",
            "description": "`diffCoverageThreshold` is never returned because this threshold isn't currently supported for commits.\n",
            "operationId": "getCommitQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/QualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "put": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Update quality settings for the commits of a repository",
            "operationId": "updateCommitQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "updatedQualitySettings",
                  "description": "The new value for the quality settings of commits in a repository",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/QualityGate"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/QualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/quality/commits/reset": {
         "post": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Reset quality settings for the commits of a repository to Codacyâ€™s default values",
            "operationId": "resetCommitsQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/QualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/quality/pull-requests/reset": {
         "post": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Reset quality settings for the pull requests of a repository to Codacyâ€™s default values",
            "operationId": "resetPullRequestsQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/QualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/quality/repository/reset": {
         "post": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Reset quality settings for the repository to Codacyâ€™s default values",
            "operationId": "resetRepositoryQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/RepositoryQualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/settings/quality/pull-requests": {
         "get": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Get quality settings for the pull requests of a repository",
            "operationId": "getPullRequestQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/QualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "put": {
            "tags": [
               "repository",
               "configuration"
            ],
            "x-jvm-package": "repository",
            "summary": "Update quality settings for the pull requests of a repository",
            "operationId": "updatePullRequestQualitySettings",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "updatedQualitySettings",
                  "description": "The new value for the quality settings of pull requests in the repository",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/QualityGate"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/QualitySettingsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/pull-requests": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "List an organization pull requests from repositories that the user as access to",
            "description": "You can search this endpoint for either `last-updated` (default), `impact` or `merged`",
            "operationId": "listOrganizationPullRequests",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "repositories",
                  "required": false,
                  "type": "string",
                  "description": "[Deprecated: Use [SearchOrganizationRepositoriesWithAnalysis](#searchorganizationrepositorieswithanalysis) instead] Comma separated list of repositories to get",
                  "x-example": "codacy-eslint,codacy-pmd",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/PullRequestWithAnalysisListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/commit-statistics": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Lists commit analysis statistics in the last `n` days that have analysis data",
            "description": "Returns the last `n` days with available data. This means that the returned days may not match the last `n` calendar days\n",
            "operationId": "listCommitAnalysisStats",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "branch",
                  "description": "Name of a [repository branch enabled on Codacy](https://docs.codacy.com/repositories-configure/managing-branches/),\nas returned by the endpoint [listRepositoryBranches](#listrepositorybranches).\nBy default, uses the main branch defined on the Codacy repository settings.\n",
                  "required": false,
                  "type": "string",
                  "x-example": "master",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "days",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 365,
                  "default": 31,
                  "description": "Number of days with data to return.",
                  "x-example": 31,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/CommitAnalysisStatsListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/category-overviews": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Lists analysis category overviews for a repository that the user as access to",
            "operationId": "listCategoryOverviews",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "branch",
                  "description": "Name of a [repository branch enabled on Codacy](https://docs.codacy.com/repositories-configure/managing-branches/),\nas returned by the endpoint [listRepositoryBranches](#listrepositorybranches).\nBy default, uses the main branch defined on the Codacy repository settings.\n",
                  "required": false,
                  "type": "string",
                  "x-example": "master",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/CategoryOverviewListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/issues/search": {
         "post": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "List issues in a repository",
            "description": "Returns information about the issues that Codacy found in a repository as available on the [Issues page](https://docs.codacy.com/repositories/issues-view/).\nUse [SearchRepositoryIssuesBody](#tocssearchrepositoryissuesbody) to filter the returned issues.\n",
            "operationId": "searchRepositoryIssues",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "filters",
                  "description": "Only return issues matching these filters",
                  "schema": {
                     "$ref": "#/definitions/SearchRepositoryIssuesBody"
                  }
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "List of issues in the repository",
                  "schema": {
                     "$ref": "#/definitions/SearchRepositoryIssuesListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/issues/overview": {
         "post": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Get an overview of the issues in a repository",
            "description": "Returns information about the number of issues that Codacy found in a repository as available on the [Issues page](https://docs.codacy.com/repositories/issues-view/).\nUse [SearchRepositoryIssuesBody](#tocssearchrepositoryissuesbody) to filter the returned issues.\n",
            "operationId": "issuesOverview",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "filters",
                  "description": "Only return issues matching these filters",
                  "schema": {
                     "$ref": "#/definitions/SearchRepositoryIssuesBody"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Overview of the issues in the repository",
                  "schema": {
                     "$ref": "#/definitions/IssuesOverviewResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/ignoredIssues/search": {
         "post": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "List ignored issues in a repository",
            "description": "Returns information about the issues that Codacy found in a repository and were ignored on the Codacy UI. Use [SearchRepositoryIssuesBody](#tocssearchrepositoryissuesbody) to filter the returned ignored issues.",
            "operationId": "searchRepositoryIgnoredIssues",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "filters",
                  "description": "Only return issues matching these filters",
                  "schema": {
                     "$ref": "#/definitions/SearchRepositoryIssuesBody"
                  }
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "List of ignored issues in the repository",
                  "schema": {
                     "$ref": "#/definitions/IgnoredIssuesListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/commits/{commitUuid}/deltaStatistics": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "Get analysis statistics of a commit",
            "description": "Returns the quality metric deltas introduced by a commit. The values of the metrics are 0 or null if Codacy didn't analyze the commit yet.\nTo obtain the full analysis statistics for the repository use the endpoint [getRepositoryWithAnalysis](#getrepositorywithanalysis).",
            "operationId": "getCommitDeltaStatistics",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "commitUuid",
                  "description": "UUID or SHA string that identifies the commit",
                  "required": true,
                  "type": "string",
                  "x-example": "2957025d42e8daadf937d4044516f991d21deea4",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Succesful operation",
                  "schema": {
                     "$ref": "#/definitions/CommitDeltaStatistics"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/analysis/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/commits/{commitUuid}/deltaIssues": {
         "get": {
            "tags": [
               "analysis"
            ],
            "x-jvm-package": "analysis",
            "summary": "List the issues introduced or fixed by a commit",
            "description": "Returns the list of issues that were introduced or fixed by a commit. A value of false in the analyzed field means that Codacy didnâ€™t analyze the commit yet, hence the list of issues will always be empty in this case.\nTo obtain the full list of issues in the repository use the endpoint [searchRepositoryIssues](#searchrepositoryissues).",
            "operationId": "listCommitDeltaIssues",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "commitUuid",
                  "description": "UUID or SHA string that identifies the commit",
                  "required": true,
                  "type": "string",
                  "x-example": "2957025d42e8daadf937d4044516f991d21deea4",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Succesful operation",
                  "schema": {
                     "$ref": "#/definitions/CommitDeltaIssuesResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/user": {
         "get": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "summary": "Get the authenticated user",
            "description": "Get the authenticated user",
            "operationId": "getUser",
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/UserResponse"
                  }
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "delete": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "operationId": "deleteUser",
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "409": {
                  "$ref": "#/responses/Conflict"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "patch": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "operationId": "patchUser",
            "parameters": [
               {
                  "in": "body",
                  "name": "UserBody",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UserBody"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/UserResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/user/organizations": {
         "get": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "summary": "List organizations for the authenticated user",
            "description": "List organizations for the authenticated user",
            "operationId": "listUserOrganizations",
            "parameters": [
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/OrganizationListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/user/organizations/{provider}": {
         "get": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "summary": "List organizations for the authenticated user",
            "description": "List organizations for the authenticated user",
            "operationId": "listOrganizations",
            "parameters": [
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/OrganizationListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/user/integrations": {
         "get": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "summary": "List integrations for the authenticated user",
            "description": "List integrations for the authenticated user",
            "operationId": "listUserIntegrations",
            "parameters": [
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/IntegrationListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/user/integrations/{accountProvider}": {
         "delete": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "operationId": "deleteIntegration",
            "parameters": [
               {
                  "in": "path",
                  "name": "accountProvider",
                  "description": "Account Provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "github",
                     "google",
                     "bitbucket",
                     "gitlab"
                  ],
                  "x-example": "github",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "AccountProvider"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}": {
         "get": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Get organization",
            "operationId": "getOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/OrganizationWithMetaResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "delete": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Delete organization",
            "description": "Delete organization",
            "operationId": "deleteOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "reasons",
                  "description": "Reasons",
                  "required": false,
                  "schema": {
                     "$ref": "#/definitions/ChurnFeedback"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "409": {
                  "$ref": "#/responses/Conflict"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/billing": {
         "get": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Get detailed information about organization billing",
            "description": "Get detailed information about organization billing",
            "operationId": "organizationDetailedBilling",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/OrganizationBillingInformationResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories": {
         "get": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "List an organization repositories for the authenticated user.",
            "description": "List an organization's repositories for the authenticated user.\nFor Bitbucket you must URL encode the cursor before using it in subsequent API calls, as the pagination comes directly from the Git provider.\nThis endpoint may return more results than those specified in the limit parameter.\nIf this endpoint doesn't return your repositories after you've made recent changes to the permissions on your Git provider,\nuse the endpoint [cleanCache](#cleanCache) to force refreshing the list of repositories for the authenticated user.\n",
            "operationId": "listOrganizationRepositories",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "filter",
                  "description": "RepositoryFilter",
                  "required": false,
                  "type": "string",
                  "enum": [
                     "Synced",
                     "NotSynced"
                  ],
                  "x-example": "Synced",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "RepositoryFilter"
                  }
               },
               {
                  "in": "query",
                  "name": "languages",
                  "description": "Languages filter",
                  "required": false,
                  "type": "string",
                  "x-example": "Scala,Java,Javascript",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/RepositoryListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               },
               "502": {
                  "$ref": "#/responses/BadGateway"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/people": {
         "get": {
            "tags": [
               "people"
            ],
            "x-jvm-package": "organization",
            "summary": "List people of an organization",
            "description": "List people of an organization",
            "operationId": "listPeopleFromOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ListPeopleResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "post": {
            "tags": [
               "people"
            ],
            "x-jvm-package": "organization",
            "summary": "Add people to organization",
            "description": "Add people to organization as members or authors (depending if they have a pending request already)",
            "operationId": "addPeopleToOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "emailList",
                  "description": "List of emails",
                  "required": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "string"
                     }
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/people/permissions": {
         "get": {
            "tags": [
               "people"
            ],
            "x-jvm-package": "organization",
            "summary": "Get permission for a user on an organization",
            "description": "Get permission for a user on an organization",
            "operationId": "getUserPermissionOnOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "email",
                  "description": "Email filter",
                  "required": true,
                  "type": "string",
                  "x-example": "mail@codacy.com",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/PersonPermissionResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/people/remove": {
         "post": {
            "tags": [
               "people"
            ],
            "x-jvm-package": "organization",
            "summary": "Remove people from an organization",
            "description": "Remove people from an organization",
            "operationId": "removePeopleFromOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "removePeopleParameter",
                  "description": "List of authors/members to remove",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/RemovePeopleBody"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Remove people response",
                  "schema": {
                     "$ref": "#/definitions/RemovePeopleResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/people/suggestions": {
         "get": {
            "tags": [
               "people"
            ],
            "x-jvm-package": "organization",
            "summary": "List people suggestions for an organization",
            "description": "List people suggestions for an organization",
            "operationId": "peopleSuggestionsForOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "List people suggestions response",
                  "schema": {
                     "$ref": "#/definitions/SuggestedAuthorsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}": {
         "get": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Fetch the specified repository",
            "operationId": "getRepository",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/RepositoryResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "delete": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Delete the specified repository",
            "operationId": "deleteRepository",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/people/suggestions": {
         "get": {
            "tags": [
               "people"
            ],
            "x-jvm-package": "repository",
            "summary": "List people suggestions for a repository",
            "description": "List people suggestions for a repository",
            "operationId": "peopleSuggestionsForRepository",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "List people suggestions response",
                  "schema": {
                     "$ref": "#/definitions/RepositorySuggestedAuthorsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/branches": {
         "get": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "List repository branches",
            "operationId": "listRepositoryBranches",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "enabled",
                  "required": false,
                  "type": "boolean",
                  "description": "Returns only the enabled or disabled branches.",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "sort",
                  "description": "Field used to sort the list of branches. The allowed values are 'name' and 'last-updated'.",
                  "required": false,
                  "type": "string",
                  "x-example": "category",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "direction",
                  "description": "Sort direction. Possible values are 'asc' (ascending) or 'desc' (descending).",
                  "required": false,
                  "type": "string",
                  "x-example": "desc",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/BranchListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/branches/{branchName}": {
         "patch": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Update the settings for a repository branch",
            "description": "Toggle analysis for a branch.\n",
            "operationId": "updateRepositoryBranchConfiguration",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "branchName",
                  "description": "Repository branch name",
                  "required": true,
                  "type": "string",
                  "x-example": "master",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "updateRepositoryBranchConfigurationBody",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateRepositoryBranchConfigurationBody"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/branches/{branchName}/setDefault": {
         "post": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Set branch as default",
            "description": "Sets the default branch for a repository. The new default branch must already be enabled on Codacy.\n",
            "operationId": "setRepositoryBranchAsDefault",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "branchName",
                  "description": "Repository branch name",
                  "required": true,
                  "type": "string",
                  "x-example": "master",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/gh/{remoteOrganizationName}/repositories/{repositoryName}/badge": {
         "post": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Create pull request adding codacy badge in the Public GitHub repository",
            "description": "Creates pull request adding the codacy badge to the README of the Public GitHub repository.\n\n**Notes:**\n- Only works for public GitHub repositories\n- The pull request is created asynchronously, and for that reason,\n  it might fail even if this endpoint responds successfully.\n- Does not create the pull request if the badge already exists.\n",
            "operationId": "createBadgePullRequest",
            "parameters": [
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/people/leave/check": {
         "get": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Check if the user can leave the organization",
            "description": "Check if the user can leave the organization or returns the reasons why they can not.",
            "operationId": "checkIfUserCanLeave",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/LeaveOrgCheckResult"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/join": {
         "get": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "List requests to join an organization",
            "description": "Endpoint to list requests to join an organization by provider and organization name",
            "operationId": "listOrganizationJoinRequests",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "required": false,
                  "type": "string",
                  "description": "Filter the results searching by this string.",
                  "x-example": "my-repository-name",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ListRequestsToJoinResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "post": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Join an organization",
            "description": "Endpoint to join an organization by provider and name",
            "operationId": "joinOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/JoinResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "402": {
                  "$ref": "#/responses/PaymentRequired"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "delete": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Decline Requests to join an organization",
            "description": "Endpoint to decline request to join an organization by provider, name and user emails to be rejected",
            "operationId": "declineRequestsToJoinOrganization",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "emailList",
                  "description": "List of emails",
                  "required": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "string"
                     }
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/join/{accountIdentifier}": {
         "delete": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Delete a request to join an organization",
            "description": "Endpoint to delete a request to join an organization by provider, name and user id",
            "operationId": "deleteOrganizationJoinRequest",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "accountIdentifier",
                  "description": "Account Identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/cache/clean": {
         "post": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Clean organization cache for the authenticated user",
            "description": "Clean cached information regarding the authenticated user on the specified organization, such as the list of repositories in the organization.",
            "operationId": "cleanCache",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/repositories": {
         "post": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Add a repository to Codacy",
            "description": "Add a new repository to an existing organization on Codacy",
            "operationId": "addRepository",
            "parameters": [
               {
                  "in": "header",
                  "name": "caller",
                  "description": "Caller",
                  "required": false,
                  "type": "string"
               },
               {
                  "in": "body",
                  "name": "addRepositoryParameter",
                  "description": "Information of repository to add",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/AddRepositoryBody"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/Repository"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "402": {
                  "$ref": "#/responses/PaymentRequired"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "409": {
                  "$ref": "#/responses/Conflict"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations": {
         "post": {
            "tags": [
               "organization"
            ],
            "x-jvm-package": "organization",
            "summary": "Add an organization to Codacy",
            "description": "Add an organization from a Git provider to Codacy",
            "operationId": "addOrganization",
            "parameters": [
               {
                  "in": "body",
                  "name": "addOrganizationParameter",
                  "description": "Informations of the organization to add",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/AddOrganizationBody"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/AddOrganizationResponse"
                  }
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/user/tokens": {
         "get": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "summary": "List the [account API tokens](https://docs.codacy.com/codacy-api/api-tokens/) of the authenticated user",
            "operationId": "getUserApiTokens",
            "parameters": [
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ApiTokenListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "post": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "summary": "Create a new [account API token](https://docs.codacy.com/codacy-api/api-tokens/) for the authenticated user",
            "operationId": "createUserApiToken",
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ApiToken"
                  }
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/user/tokens/{tokenId}": {
         "delete": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "summary": "Delete an [account API token](https://docs.codacy.com/codacy-api/api-tokens/) for the authenticated user by ID",
            "operationId": "deleteUserApiToken",
            "parameters": [
               {
                  "in": "path",
                  "name": "tokenId",
                  "description": "API token ID",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 30,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/user/password": {
         "post": {
            "tags": [
               "account"
            ],
            "x-jvm-package": "account",
            "summary": "Change the password for the authenticated user",
            "description": "For the authenticated user, validates the current password and changes it to a new one",
            "operationId": "changePassword",
            "parameters": [
               {
                  "in": "body",
                  "name": "ChangePasswordBody",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ChangePasswordBody"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/billing/{provider}/{remoteOrganizationName}/subscription": {
         "delete": {
            "tags": [
               "billing"
            ],
            "x-jvm-package": "billing",
            "summary": "Delete billing subscription for organization",
            "description": "Delete billing subscription for organization",
            "operationId": "deleteSubscription",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "reasons",
                  "description": "Reasons",
                  "required": false,
                  "schema": {
                     "$ref": "#/definitions/ChurnFeedback"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "409": {
                  "$ref": "#/responses/Conflict"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/login/integrations": {
         "get": {
            "tags": [
               "integrations"
            ],
            "x-jvm-package": "integrations",
            "summary": "List configured login providers on Codacy's platform",
            "description": "List configured login providers on Codacy's platform",
            "operationId": "listConfiguredLoginIntegrations",
            "security": [],
            "parameters": [
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ConfiguredLoginIntegrationListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/provider/integrations": {
         "get": {
            "tags": [
               "integrations"
            ],
            "x-jvm-package": "integrations",
            "summary": "List provider integrations existing on Codacy's platform",
            "description": "List provider integrations existing on Codacy's platform",
            "operationId": "listProviderIntegrations",
            "security": [],
            "parameters": [
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ProviderIntegrationListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/configuration/status": {
         "get": {
            "tags": [
               "configuration"
            ],
            "x-jvm-package": "configuration",
            "summary": "Get configuration status",
            "description": "Get configuration status",
            "operationId": "getConfigurationStatus",
            "security": [],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ConfigurationStatusResponse"
                  }
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/health": {
         "get": {
            "tags": [
               "health"
            ],
            "x-jvm-package": "health",
            "summary": "Health check endpoint",
            "description": "Health check endpoint",
            "operationId": "health",
            "security": [],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/HealthCheckResponse"
                  }
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/admin/license": {
         "post": {
            "tags": [
               "admin"
            ],
            "x-jvm-package": "admin.license",
            "summary": "(non self-hosted admins only) Generates a license for self-hosted instances of Codacy",
            "operationId": "generateLicense",
            "parameters": [
               {
                  "in": "body",
                  "name": "LicenseBody",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/License"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/LicenseResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/admin/dormantAccounts": {
         "delete": {
            "tags": [
               "admin"
            ],
            "x-jvm-package": "admin",
            "summary": "(Codacy Self-hosted admins only) Delete Codacy users based on a CSV file exported by GitHub Enterprise",
            "operationId": "deleteDormantAccounts",
            "parameters": [
               {
                  "in": "body",
                  "name": "CSVFileContents",
                  "description": "CSV file containing email addresses of the users to delete in a column called \"email\"",
                  "schema": {
                     "type": "string"
                  },
                  "required": true
               }
            ],
            "consumes": [
               "text/plain"
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/DeleteDormantAccountsResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "403": {
                  "$ref": "#/responses/Forbidden"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/languages/tools": {
         "get": {
            "tags": [
               "languages"
            ],
            "x-jvm-package": "languages",
            "summary": "Retrieves the list of languages of available tools",
            "description": "Lists the languages of the available tools in Codacy",
            "operationId": "listLanguagesWithTools",
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/LanguageListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/tools": {
         "get": {
            "tags": [
               "tools"
            ],
            "x-jvm-package": "tools",
            "summary": "Retrieves the list of tools",
            "description": "Lists the available tools in Codacy",
            "operationId": "listTools",
            "parameters": [
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ToolListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/tools/{toolUuid}/patterns": {
         "get": {
            "tags": [
               "tools"
            ],
            "x-jvm-package": "tools",
            "summary": "Retrieve the list of tool patterns",
            "description": "Lists the available patterns for the given tool",
            "operationId": "listPatterns",
            "parameters": [
               {
                  "in": "path",
                  "name": "toolUuid",
                  "description": "Tool unique identifier",
                  "required": true,
                  "type": "string",
                  "x-example": "847feb32-9ff2-11ea-bb37-0242ac130002",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operations",
                  "schema": {
                     "$ref": "#/definitions/PatternListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/duplicationTools": {
         "get": {
            "tags": [
               "tools"
            ],
            "x-jvm-package": "tools",
            "summary": "Retrieves the list of tools",
            "description": "Lists the available duplication tools in Codacy",
            "operationId": "listDuplicationTools",
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/DuplicationToolListResponse"
                  }
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/metricsTools": {
         "get": {
            "tags": [
               "tools"
            ],
            "x-jvm-package": "tools",
            "summary": "Retrieves the list of tools",
            "description": "Lists the available metrics tools in Codacy",
            "operationId": "listMetricsTools",
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/MetricsToolListResponse"
                  }
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/files": {
         "get": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "List files in a repository",
            "description": "Returns the most recent analysis information for the files in a repository as available on the [Files page](https://docs.codacy.com/repositories/files-view/).\nFiles that are [ignored on Codacy](https://docs.codacy.com/repositories-configure/ignoring-files/) aren't returned.\n",
            "operationId": "listFiles",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "branch",
                  "description": "Name of a [repository branch enabled on Codacy](https://docs.codacy.com/repositories-configure/managing-branches/),\nas returned by the endpoint [listRepositoryBranches](#listrepositorybranches).\nBy default, uses the main branch defined on the Codacy repository settings.\n",
                  "required": false,
                  "type": "string",
                  "x-example": "master",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "search",
                  "description": "Filter files that include this string anywhere in their relative path",
                  "required": false,
                  "type": "string",
                  "x-example": "file.js",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "sort",
                  "description": "Field used to sort the list of files. The allowed values are 'filename', 'issues', 'grade', 'duplication', 'complexity', and 'coverage'.",
                  "required": false,
                  "type": "string",
                  "x-example": "category",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "direction",
                  "description": "Sort direction. Possible values are 'asc' (ascending) or 'desc' (descending).",
                  "required": false,
                  "type": "string",
                  "x-example": "desc",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "List of files in the repository",
                  "schema": {
                     "$ref": "#/definitions/FileListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards": {
         "get": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "List the coding standards for an organization, including draft coding standards",
            "operationId": "listCodingStandards",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "List of coding standards for an organization",
                  "schema": {
                     "$ref": "#/definitions/CodingStandardsListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "post": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "Create a coding standard for an organization",
            "operationId": "createCodingStandard",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "sourceRepository",
                  "description": "Name of a repository in the same organization to use as a template when creating the new coding standard",
                  "required": false,
                  "type": "string",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "sourceCodingStandard",
                  "description": "Identifier of an existing coding standard to use as a template when creating the new coding standard, including the enabled repositories",
                  "required": false,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "createCodingStandardBody",
                  "description": "Details of the coding standard to create",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CreateCodingStandardBody"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Successfully created a coding standard",
                  "schema": {
                     "$ref": "#/definitions/CodingStandardResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "description": "An unexpected error occurred while creating a coding standard",
                  "x-ms-error-response": true,
                  "schema": {
                     "$ref": "#/definitions/InternalServerError"
                  }
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards/{codingStandardId}": {
         "get": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "Get a coding standard",
            "operationId": "getCodingStandard",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/CodingStandardResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards/{codingStandardId}/tools": {
         "get": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "List tools in a coding standard",
            "operationId": "listCodingStandardTools",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/CodingStandardToolsListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "description": "An unexpected error occurred while listing the tools of the coding standard",
                  "x-ms-error-response": true,
                  "schema": {
                     "$ref": "#/definitions/InternalServerError"
                  }
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards/{codingStandardId}/setDefault": {
         "post": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "Set the default coding standard for an organization",
            "operationId": "setDefaultCodingStandard",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "setDefaultCodingStandard",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/SetDefaultCodingStandardBody"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards/{codingStandardId}/tools/{toolUuid}/patterns": {
         "get": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "List the code patterns configured for a tool in a coding standard",
            "operationId": "listCodingStandardPatterns",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "toolUuid",
                  "description": "Tool unique identifier",
                  "required": true,
                  "type": "string",
                  "x-example": "847feb32-9ff2-11ea-bb37-0242ac130002",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "languages",
                  "description": "Languages filter",
                  "required": false,
                  "type": "string",
                  "x-example": "Scala,Java,Javascript",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "categories",
                  "description": "Filter by a comma separated list of code pattern categories. The allowed values are 'Security', 'ErrorProne', 'CodeStyle', 'Compatibility', 'UnusedCode', and 'Performance'",
                  "required": false,
                  "type": "string",
                  "x-example": "Security,ErrorProne",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "severityLevels",
                  "description": "Filter by a comma separated list of code pattern severity levels. The allowed values are 'Error', 'Warning', and 'Info'",
                  "required": false,
                  "type": "string",
                  "x-example": "Error,Warning",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "sort",
                  "description": "Field used to sort the tool's code patterns.  The allowed values are 'category', 'recommended', and 'severity'",
                  "required": false,
                  "type": "string",
                  "x-example": "category",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "direction",
                  "description": "Sort direction. Possible values are 'asc' (ascending) or 'desc' (descending).",
                  "required": false,
                  "type": "string",
                  "x-example": "desc",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/CodingStandardPatternsListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards/{codingStandardId}/tools/{toolUuid}/patterns/update": {
         "post": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "Bulk updates the code patterns of a tool in a coding standard.",
            "description": "Use filters to specify the code patterns to update, or omit the filters to update all code patterns.\n",
            "operationId": "updateCodingStandardPatterns",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "toolUuid",
                  "description": "Tool unique identifier",
                  "required": true,
                  "type": "string",
                  "x-example": "847feb32-9ff2-11ea-bb37-0242ac130002",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "languages",
                  "description": "Languages filter",
                  "required": false,
                  "type": "string",
                  "x-example": "Scala,Java,Javascript",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "categories",
                  "description": "Filter by a comma separated list of code pattern categories. The allowed values are 'Security', 'ErrorProne', 'CodeStyle', 'Compatibility', 'UnusedCode', and 'Performance'",
                  "required": false,
                  "type": "string",
                  "x-example": "Security,ErrorProne",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "severityLevels",
                  "description": "Filter by a comma separated list of code pattern severity levels. The allowed values are 'Error', 'Warning', and 'Info'",
                  "required": false,
                  "type": "string",
                  "x-example": "Error,Warning",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "updateCodingStandardPatternsBody",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/UpdateCodingStandardPatternsBody"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "409": {
                  "$ref": "#/responses/Conflict"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards/{codingStandardId}/tools/{toolUuid}": {
         "patch": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "Configure a tool in a draft coding standard.",
            "description": "Toggle a tool and configure its code patterns in a draft coding standard.\nOnly the code patterns included in the body are updated, and if there are none only the enabled status of the tool is set.\nYou can only update draft coding standards and configure a maximum of 1000 code patterns per call.\n",
            "operationId": "updateCodingStandardToolConfiguration",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "toolUuid",
                  "description": "Tool unique identifier",
                  "required": true,
                  "type": "string",
                  "x-example": "847feb32-9ff2-11ea-bb37-0242ac130002",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "toolConfiguration",
                  "description": "Configuration of a tool and its code patterns",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ToolConfiguration"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "409": {
                  "$ref": "#/responses/Conflict"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards/{codingStandardId}/repositories": {
         "get": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "List the repositories that are using a coding standard",
            "operationId": "listCodingStandardRepositories",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "cursor",
                  "required": false,
                  "type": "string",
                  "description": "Cursor to return next items in the list",
                  "x-example": "Yms345gh==",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/CodingStandardRepositoriesListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "patch": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "Apply a coding standard to a list of repositories",
            "description": "Link or unlink a coding standard to a list of repositories.\nIf the coding standard is a draft, the changes will only be effective when promoting the draft coding standard.\n",
            "operationId": "applyCodingStandardToRepositories",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "body",
                  "name": "applyCodingStandardToRepositoriesBody",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/ApplyCodingStandardToRepositoriesBody"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ApplyCodingStandardToRepositoriesResultResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/coding-standards/{codingStandardId}/promote": {
         "post": {
            "tags": [
               "coding standards"
            ],
            "x-jvm-package": "standards",
            "summary": "Promote a draft coding standard to an effective coding standard",
            "description": "Returns the result of applying the coding standard to the repositories.",
            "operationId": "promoteDraftCodingStandard",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "codingStandardId",
                  "description": "Coding standard identifier",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 1,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ApplyCodingStandardToRepositoriesResultResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "409": {
                  "$ref": "#/responses/Conflict"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/tokens": {
         "get": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "List the [project API tokens](https://docs.codacy.com/codacy-api/api-tokens/) for a repository",
            "operationId": "listRepositoryApiTokens",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ApiTokenListResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         },
         "post": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Create a new [project API token](https://docs.codacy.com/codacy-api/api-tokens/) for a repository",
            "operationId": "createRepositoryApiToken",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "201": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/ApiTokenResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/tokens/{tokenId}": {
         "delete": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Delete a [project API token](https://docs.codacy.com/codacy-api/api-tokens/) for a repository by ID",
            "operationId": "deleteRepositoryApiToken",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "tokenId",
                  "description": "API token ID",
                  "required": true,
                  "type": "integer",
                  "format": "int64",
                  "x-example": 30,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "204": {
                  "description": "Successful operation"
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      },
      "/organizations/{provider}/{remoteOrganizationName}/repositories/{repositoryName}/coverage/status": {
         "get": {
            "tags": [
               "repository"
            ],
            "x-jvm-package": "repository",
            "summary": "Returns a list of the most recent coverage reports and their respective status",
            "operationId": "listCoverageReports",
            "parameters": [
               {
                  "in": "path",
                  "name": "provider",
                  "description": "Git provider",
                  "required": true,
                  "type": "string",
                  "enum": [
                     "bb",
                     "gh",
                     "gl"
                  ],
                  "x-example": "gh",
                  "x-ms-parameter-location": "method",
                  "x-ms-enum": {
                     "name": "Provider"
                  }
               },
               {
                  "in": "path",
                  "name": "remoteOrganizationName",
                  "description": "Organization name on the Git provider",
                  "required": true,
                  "type": "string",
                  "x-example": "codacy",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "path",
                  "name": "repositoryName",
                  "description": "Repository name on the Git provider organization",
                  "required": true,
                  "type": "string",
                  "x-example": "awesome-repo",
                  "x-ms-parameter-location": "method"
               },
               {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "type": "integer",
                  "format": "int32",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 100,
                  "description": "Maximum number of items to return",
                  "x-example": 20,
                  "x-ms-parameter-location": "method"
               }
            ],
            "responses": {
               "200": {
                  "description": "Successful operation",
                  "schema": {
                     "$ref": "#/definitions/CoverageReportResponse"
                  }
               },
               "400": {
                  "$ref": "#/responses/BadRequest"
               },
               "401": {
                  "$ref": "#/responses/Unauthorized"
               },
               "404": {
                  "$ref": "#/responses/NotFound"
               },
               "500": {
                  "$ref": "#/responses/InternalServerError"
               }
            }
         }
      }
   }
}